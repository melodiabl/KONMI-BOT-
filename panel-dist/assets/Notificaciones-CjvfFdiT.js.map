{"version":3,"file":"Notificaciones-CjvfFdiT.js","sources":["../../src/pages/Notificaciones.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Badge,\n  IconButton,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Flex,\n  Card,\n  CardBody,\n  Select,\n  useColorModeValue,\n  Tooltip,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  Switch,\n  FormControl,\n  FormLabel,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n  Avatar,\n  Divider,\n} from '@chakra-ui/react';\nimport {\n  FaSearch,\n  FaBell,\n  FaCheck,\n  FaTimes,\n  FaEye,\n  FaEllipsisV,\n  FaTrash,\n  FaEnvelope,\n  FaEnvelopeOpen,\n  FaExclamationTriangle,\n  FaInfoCircle,\n  FaCheckCircle,\n  FaClock,\n  FaUser,\n  FaCog,\n  FaFilter,\n  FaDownload,\n} from 'react-icons/fa';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { apiService } from '../services/api';\n\ninterface Notification {\n  id: number;\n  title: string;\n  message: string;\n  type: string;\n  category: string;\n  read: boolean;\n  user_id: number;\n  created_at: string;\n  updated_at: string;\n  metadata?: any;\n}\n\nconst typeColors = {\n  info: 'blue',\n  success: 'green',\n  warning: 'orange',\n  error: 'red',\n  system: 'purple',\n};\n\nconst typeIcons = {\n  info: FaInfoCircle,\n  success: FaCheckCircle,\n  warning: FaExclamationTriangle,\n  error: FaExclamationTriangle,\n  system: FaCog,\n};\n\nconst categoryColors = {\n  system: 'purple',\n  user: 'blue',\n  content: 'green',\n  security: 'red',\n  general: 'gray',\n};\n\nexport const Notificaciones: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState('');\n  const [readFilter, setReadFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n  const queryClient = useQueryClient();\n\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n\n  // Queries\n  const { data: notificationsData, isLoading, error } = useQuery(\n    ['notifications', currentPage, searchTerm, typeFilter, categoryFilter, readFilter],\n    () => apiService.getNotificaciones(currentPage, 20)\n  );\n\n  const { data: stats } = useQuery('notificationStats', () => apiService.getNotificationStats());\n\n  // Mutations\n  const markAsReadMutation = useMutation(\n    (id: number) => apiService.markAsRead(id),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('notifications');\n        queryClient.invalidateQueries('notificationStats');\n        toast({\n          title: 'Notificación marcada como leída',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al marcar como leída',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const markAllAsReadMutation = useMutation(\n    () => apiService.markAllAsRead(),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('notifications');\n        queryClient.invalidateQueries('notificationStats');\n        toast({\n          title: 'Todas las notificaciones marcadas como leídas',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al marcar todas como leídas',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const deleteNotificationMutation = useMutation(\n    (id: number) => apiService.deleteNotification(id),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('notifications');\n        queryClient.invalidateQueries('notificationStats');\n        toast({\n          title: 'Notificación eliminada',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al eliminar notificación',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const handleMarkAsRead = (id: number) => {\n    markAsReadMutation.mutate(id);\n  };\n\n  const handleMarkAllAsRead = () => {\n    if (window.confirm('¿Marcar todas las notificaciones como leídas?')) {\n      markAllAsReadMutation.mutate();\n    }\n  };\n\n  const handleDelete = (id: number) => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar esta notificación?')) {\n      deleteNotificationMutation.mutate(id);\n    }\n  };\n\n  const handleViewNotification = (notification: Notification) => {\n    setSelectedNotification(notification);\n    if (!notification.read) {\n      handleMarkAsRead(notification.id);\n    }\n    onOpen();\n  };\n\n  const formatTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n    \n    if (diffInHours < 1) {\n      return 'Hace unos minutos';\n    } else if (diffInHours < 24) {\n      return `Hace ${Math.floor(diffInHours)} horas`;\n    } else {\n      return date.toLocaleDateString();\n    }\n  };\n\n  const getNotificationStats = () => {\n    if (!notificationsData?.notifications) return { total: 0, unread: 0, read: 0 };\n    \n    const total = notificationsData.notifications.length;\n    const unread = notificationsData.notifications.filter((n: Notification) => !n.read).length;\n    const read = total - unread;\n    \n    return { total, unread, read };\n  };\n\n  const notificationStats = getNotificationStats();\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        Error al cargar notificaciones: {(error as any).message}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <VStack spacing={6} align=\"stretch\">\n        {/* Header */}\n        <Flex align=\"center\" justify=\"space-between\">\n          <Box>\n            <Heading size=\"lg\">Notificaciones</Heading>\n            <Text color=\"gray.600\" mt={1}>\n              Gestión y visualización de notificaciones del sistema\n            </Text>\n          </Box>\n          <HStack spacing={3}>\n            <Button\n              leftIcon={<FaCheck />}\n              colorScheme=\"blue\"\n              variant=\"outline\"\n              onClick={handleMarkAllAsRead}\n              isLoading={markAllAsReadMutation.isLoading}\n              isDisabled={notificationStats.unread === 0}\n            >\n              Marcar todas como leídas\n            </Button>\n            <Button\n              leftIcon={<FaDownload />}\n              colorScheme=\"green\"\n              variant=\"outline\"\n            >\n              Exportar\n            </Button>\n          </HStack>\n        </Flex>\n\n        {/* Estadísticas */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={8} justify=\"center\">\n              <VStack>\n                <Badge colorScheme=\"blue\" size=\"lg\">\n                  {notificationStats.total}\n                </Badge>\n                <Text fontSize=\"sm\" fontWeight=\"semibold\">Total</Text>\n              </VStack>\n              <VStack>\n                <Badge colorScheme=\"red\" size=\"lg\">\n                  {notificationStats.unread}\n                </Badge>\n                <Text fontSize=\"sm\" fontWeight=\"semibold\">No leídas</Text>\n              </VStack>\n              <VStack>\n                <Badge colorScheme=\"green\" size=\"lg\">\n                  {notificationStats.read}\n                </Badge>\n                <Text fontSize=\"sm\" fontWeight=\"semibold\">Leídas</Text>\n              </VStack>\n              <VStack>\n                <Badge colorScheme=\"purple\" size=\"lg\">\n                  {stats?.totalCategories || 0}\n                </Badge>\n                <Text fontSize=\"sm\" fontWeight=\"semibold\">Categorías</Text>\n              </VStack>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Filtros */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={4} wrap=\"wrap\">\n              <InputGroup maxW=\"300px\">\n                <InputLeftElement pointerEvents=\"none\">\n                  <FaSearch color=\"gray.300\" />\n                </InputLeftElement>\n                <Input\n                  placeholder=\"Buscar notificaciones...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </InputGroup>\n              <Select\n                placeholder=\"Filtrar por tipo\"\n                value={typeFilter}\n                onChange={(e) => setTypeFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"info\">Info</option>\n                <option value=\"success\">Success</option>\n                <option value=\"warning\">Warning</option>\n                <option value=\"error\">Error</option>\n                <option value=\"system\">System</option>\n              </Select>\n              <Select\n                placeholder=\"Filtrar por categoría\"\n                value={categoryFilter}\n                onChange={(e) => setCategoryFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"system\">Sistema</option>\n                <option value=\"user\">Usuario</option>\n                <option value=\"content\">Contenido</option>\n                <option value=\"security\">Seguridad</option>\n                <option value=\"general\">General</option>\n              </Select>\n              <Select\n                placeholder=\"Filtrar por estado\"\n                value={readFilter}\n                onChange={(e) => setReadFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"unread\">No leídas</option>\n                <option value=\"read\">Leídas</option>\n              </Select>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Tabla de Notificaciones */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            {isLoading ? (\n              <Box textAlign=\"center\" py={8}>\n                <Spinner size=\"xl\" />\n                <Text mt={4}>Cargando notificaciones...</Text>\n              </Box>\n            ) : (\n              <Box overflowX=\"auto\">\n                <Table variant=\"simple\">\n                  <Thead>\n                    <Tr>\n                      <Th>Estado</Th>\n                      <Th>Título</Th>\n                      <Th>Tipo</Th>\n                      <Th>Categoría</Th>\n                      <Th>Fecha</Th>\n                      <Th>Acciones</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {notificationsData?.notifications?.map((notification: Notification) => {\n                      const IconComponent = typeIcons[notification.type as keyof typeof typeIcons] || FaBell;\n                      \n                      return (\n                        <Tr \n                          key={notification.id}\n                          bg={!notification.read ? `${typeColors[notification.type as keyof typeof typeColors]}.50` : undefined}\n                          _hover={{ bg: `${typeColors[notification.type as keyof typeof typeColors]}.100` }}\n                          cursor=\"pointer\"\n                          onClick={() => handleViewNotification(notification)}\n                        >\n                          <Td>\n                            <HStack>\n                              {notification.read ? (\n                                <FaEnvelopeOpen color=\"gray\" />\n                              ) : (\n                                <FaEnvelope color=\"blue\" />\n                              )}\n                              {!notification.read && (\n                                <Box\n                                  w={2}\n                                  h={2}\n                                  borderRadius=\"full\"\n                                  bg={`${typeColors[notification.type as keyof typeof typeColors]}.500`}\n                                />\n                              )}\n                            </HStack>\n                          </Td>\n                          <Td>\n                            <VStack align=\"start\" spacing={1}>\n                              <Text fontWeight=\"semibold\" color={!notification.read ? 'blue.600' : undefined}>\n                                {notification.title}\n                              </Text>\n                              <Text fontSize=\"sm\" color=\"gray.500\" noOfLines={2}>\n                                {notification.message}\n                              </Text>\n                            </VStack>\n                          </Td>\n                          <Td>\n                            <HStack>\n                              <Box as={IconComponent} color={`${typeColors[notification.type as keyof typeof typeColors]}.500`} />\n                              <Badge\n                                colorScheme={typeColors[notification.type as keyof typeof typeColors] || 'gray'}\n                                variant=\"subtle\"\n                              >\n                                {notification.type}\n                              </Badge>\n                            </HStack>\n                          </Td>\n                          <Td>\n                            <Badge\n                              colorScheme={categoryColors[notification.category as keyof typeof categoryColors] || 'gray'}\n                              variant=\"subtle\"\n                            >\n                              {notification.category}\n                            </Badge>\n                          </Td>\n                          <Td>\n                            <VStack align=\"start\" spacing={0}>\n                              <Text fontSize=\"sm\">{formatTimestamp(notification.created_at)}</Text>\n                              <Text fontSize=\"xs\" color=\"gray.500\">\n                                {new Date(notification.created_at).toLocaleDateString()}\n                              </Text>\n                            </VStack>\n                          </Td>\n                          <Td>\n                            <HStack spacing={2}>\n                              <Tooltip label=\"Ver detalles\">\n                                <IconButton\n                                  aria-label=\"Ver detalles\"\n                                  icon={<FaEye />}\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  colorScheme=\"blue\"\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    handleViewNotification(notification);\n                                  }}\n                                />\n                              </Tooltip>\n                              {!notification.read && (\n                                <Tooltip label=\"Marcar como leída\">\n                                  <IconButton\n                                    aria-label=\"Marcar como leída\"\n                                    icon={<FaCheck />}\n                                    size=\"sm\"\n                                    variant=\"ghost\"\n                                    colorScheme=\"green\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleMarkAsRead(notification.id);\n                                    }}\n                                  />\n                                </Tooltip>\n                              )}\n                              <Menu>\n                                <MenuButton\n                                  as={IconButton}\n                                  aria-label=\"Más opciones\"\n                                  icon={<FaEllipsisV />}\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={(e) => e.stopPropagation()}\n                                />\n                                <MenuList>\n                                  <MenuItem icon={<FaUser />}>\n                                    Ver usuario\n                                  </MenuItem>\n                                  <MenuItem icon={<FaClock />}>\n                                    Ver historial\n                                  </MenuItem>\n                                  <MenuDivider />\n                                  <MenuItem \n                                    icon={<FaTrash />} \n                                    color=\"red.500\"\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleDelete(notification.id);\n                                    }}\n                                  >\n                                    Eliminar\n                                  </MenuItem>\n                                </MenuList>\n                              </Menu>\n                            </HStack>\n                          </Td>\n                        </Tr>\n                      );\n                    })}\n                  </Tbody>\n                </Table>\n              </Box>\n            )}\n\n            {/* Paginación */}\n            {notificationsData?.pagination && (\n              <Flex justify=\"center\" mt={6}>\n                <HStack spacing={2}>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    isDisabled={currentPage === 1}\n                  >\n                    Anterior\n                  </Button>\n                  <Text>\n                    Página {currentPage} de {notificationsData.pagination.totalPages}\n                  </Text>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    isDisabled={currentPage === notificationsData.pagination.totalPages}\n                  >\n                    Siguiente\n                  </Button>\n                </HStack>\n              </Flex>\n            )}\n          </CardBody>\n        </Card>\n      </VStack>\n\n      {/* Modal de Detalles de Notificación */}\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>\n            <HStack>\n              <Box \n                as={typeIcons[selectedNotification?.type as keyof typeof typeIcons] || FaBell} \n                color={`${typeColors[selectedNotification?.type as keyof typeof typeColors]}.500`} \n              />\n              <Text>Detalles de la Notificación</Text>\n            </HStack>\n          </ModalHeader>\n          <ModalBody>\n            {selectedNotification && (\n              <VStack spacing={4} align=\"stretch\">\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontWeight=\"semibold\" fontSize=\"lg\">\n                      {selectedNotification.title}\n                    </Text>\n                    <Badge colorScheme={typeColors[selectedNotification.type as keyof typeof typeColors]}>\n                      {selectedNotification.type}\n                    </Badge>\n                  </HStack>\n                  <Text fontSize=\"sm\" color=\"gray.600\">\n                    {formatTimestamp(selectedNotification.created_at)} • {selectedNotification.category}\n                  </Text>\n                </Box>\n\n                <Divider />\n\n                <Box>\n                  <Text fontWeight=\"semibold\" mb={2}>Mensaje</Text>\n                  <Text>{selectedNotification.message}</Text>\n                </Box>\n\n                {selectedNotification.metadata && (\n                  <Box>\n                    <Text fontWeight=\"semibold\" mb={2}>Información Adicional</Text>\n                    <Text fontSize=\"sm\" color=\"gray.600\">\n                      {JSON.stringify(selectedNotification.metadata, null, 2)}\n                    </Text>\n                  </Box>\n                )}\n              </VStack>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <HStack spacing={3}>\n              {selectedNotification && !selectedNotification.read && (\n                <Button\n                  leftIcon={<FaCheck />}\n                  colorScheme=\"green\"\n                  onClick={() => {\n                    handleMarkAsRead(selectedNotification.id);\n                    onClose();\n                  }}\n                >\n                  Marcar como leída\n                </Button>\n              )}\n              <Button onClick={onClose}>Cerrar</Button>\n            </HStack>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default Notificaciones;\n\n\n\n"],"names":["typeColors","typeIcons","FaInfoCircle","FaCheckCircle","FaExclamationTriangle","FaCog","categoryColors","Notificaciones","searchTerm","setSearchTerm","useState","typeFilter","setTypeFilter","categoryFilter","setCategoryFilter","readFilter","setReadFilter","currentPage","setCurrentPage","selectedNotification","setSelectedNotification","isOpen","onOpen","onClose","useDisclosure","toast","useToast","queryClient","useQueryClient","cardBg","useColorModeValue","borderColor","notificationsData","isLoading","error","useQuery","apiService","stats","markAsReadMutation","useMutation","id","markAllAsReadMutation","deleteNotificationMutation","handleMarkAsRead","handleMarkAllAsRead","handleDelete","handleViewNotification","notification","formatTimestamp","timestamp","date","diffInHours","notificationStats","total","unread","n","read","jsxs","Alert","jsx","AlertIcon","Box","VStack","Flex","Heading","Text","HStack","Button","FaCheck","FaDownload","Card","CardBody","Badge","InputGroup","InputLeftElement","FaSearch","Input","e","Select","Spinner","Table","Thead","Tr","Th","Tbody","_a","IconComponent","FaBell","Td","FaEnvelopeOpen","FaEnvelope","Tooltip","IconButton","FaEye","Menu","MenuButton","FaEllipsisV","MenuList","MenuItem","FaUser","FaClock","MenuDivider","FaTrash","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","Divider","ModalFooter"],"mappings":"kzBAkFA,MAAMA,EAAa,CACjB,KAAM,OACN,QAAS,QACT,QAAS,SACT,MAAO,MACP,OAAQ,QACV,EAEMC,EAAY,CAChB,KAAMC,GACN,QAASC,GACT,QAASC,EACT,MAAOA,EACP,OAAQC,EACV,EAEMC,GAAiB,CACrB,OAAQ,SACR,KAAM,OACN,QAAS,QACT,SAAU,MACV,QAAS,MACX,EAEaC,GAA2B,IAAM,OAC5C,KAAM,CAACC,EAAYC,CAAa,EAAIC,EAAAA,SAAS,EAAE,EACzC,CAACC,EAAYC,CAAa,EAAIF,EAAAA,SAAS,EAAE,EACzC,CAACG,EAAgBC,EAAiB,EAAIJ,EAAAA,SAAS,EAAE,EACjD,CAACK,EAAYC,EAAa,EAAIN,EAAAA,SAAS,EAAE,EACzC,CAACO,EAAaC,CAAc,EAAIR,EAAAA,SAAS,CAAC,EAC1C,CAACS,EAAsBC,EAAuB,EAAIV,EAAAA,SAA8B,IAAI,EAEpF,CAAE,OAAAW,GAAQ,OAAAC,GAAQ,QAAAC,CAAA,EAAYC,GAAA,EAC9BC,EAAQC,GAAA,EACRC,EAAcC,GAAA,EAEdC,EAASC,EAAkB,QAAS,UAAU,EAC9CC,EAAcD,EAAkB,WAAY,UAAU,EAGtD,CAAE,KAAME,EAAmB,UAAAC,GAAW,MAAAC,GAAUC,EACpD,CAAC,gBAAiBlB,EAAaT,EAAYG,EAAYE,EAAgBE,CAAU,EACjF,IAAMqB,EAAW,kBAAkBnB,EAAa,EAAE,CAAA,EAG9C,CAAE,KAAMoB,GAAUF,EAAS,oBAAqB,IAAMC,EAAW,sBAAsB,EAGvFE,GAAqBC,EACxBC,GAAeJ,EAAW,WAAWI,CAAE,EACxC,CACE,UAAW,IAAM,CACfb,EAAY,kBAAkB,eAAe,EAC7CA,EAAY,kBAAkB,mBAAmB,EACjDF,EAAM,CACJ,MAAO,kCACP,OAAQ,SAAA,CACT,CACH,EACA,QAAUS,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,6BAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACF,EAGIO,EAAwBF,EAC5B,IAAMH,EAAW,cAAA,EACjB,CACE,UAAW,IAAM,CACfT,EAAY,kBAAkB,eAAe,EAC7CA,EAAY,kBAAkB,mBAAmB,EACjDF,EAAM,CACJ,MAAO,gDACP,OAAQ,SAAA,CACT,CACH,EACA,QAAUS,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,oCAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACF,EAGIQ,GAA6BH,EAChCC,GAAeJ,EAAW,mBAAmBI,CAAE,EAChD,CACE,UAAW,IAAM,CACfb,EAAY,kBAAkB,eAAe,EAC7CA,EAAY,kBAAkB,mBAAmB,EACjDF,EAAM,CACJ,MAAO,yBACP,OAAQ,SAAA,CACT,CACH,EACA,QAAUS,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,iCAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACF,EAGIS,EAAoBH,GAAe,CACvCF,GAAmB,OAAOE,CAAE,CAC9B,EAEMI,GAAsB,IAAM,CAC5B,OAAO,QAAQ,+CAA+C,GAChEH,EAAsB,OAAA,CAE1B,EAEMI,GAAgBL,GAAe,CAC/B,OAAO,QAAQ,0DAA0D,GAC3EE,GAA2B,OAAOF,CAAE,CAExC,EAEMM,EAA0BC,GAA+B,CAC7D3B,GAAwB2B,CAAY,EAC/BA,EAAa,MAChBJ,EAAiBI,EAAa,EAAE,EAElCzB,GAAA,CACF,EAEM0B,EAAmBC,GAAsB,CAC7C,MAAMC,EAAO,IAAI,KAAKD,CAAS,EAEzBE,OADU,KAAA,EACS,QAAA,EAAYD,EAAK,YAAc,IAAO,GAAK,IAEpE,OAAIC,EAAc,EACT,oBACEA,EAAc,GAChB,QAAQ,KAAK,MAAMA,CAAW,CAAC,SAE/BD,EAAK,mBAAA,CAEhB,EAYME,GAVuB,IAAM,CACjC,GAAI,EAACpB,GAAA,MAAAA,EAAmB,eAAe,MAAO,CAAE,MAAO,EAAG,OAAQ,EAAG,KAAM,CAAA,EAE3E,MAAMqB,EAAQrB,EAAkB,cAAc,OACxCsB,EAAStB,EAAkB,cAAc,OAAQuB,GAAoB,CAACA,EAAE,IAAI,EAAE,OAC9EC,EAAOH,EAAQC,EAErB,MAAO,CAAE,MAAAD,EAAO,OAAAC,EAAQ,KAAAE,CAAA,CAC1B,GAE0B,EAE1B,OAAItB,EAEAuB,EAAAA,KAACC,GAAA,CAAM,OAAO,QACZ,SAAA,CAAAC,EAAAA,IAACC,GAAA,EAAU,EAAE,mCACqB1B,EAAc,OAAA,EAClD,SAKD2B,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACK,EAAA,CAAO,QAAS,EAAG,MAAM,UAExB,SAAA,CAAAL,EAAAA,KAACM,EAAA,CAAK,MAAM,SAAS,QAAQ,gBAC3B,SAAA,CAAAN,OAACI,EAAA,CACC,SAAA,CAAAF,EAAAA,IAACK,GAAA,CAAQ,KAAK,KAAK,SAAA,iBAAc,QAChCC,EAAA,CAAK,MAAM,WAAW,GAAI,EAAG,SAAA,uDAAA,CAE9B,CAAA,EACF,EACAR,EAAAA,KAACS,EAAA,CAAO,QAAS,EACf,SAAA,CAAAP,EAAAA,IAACQ,EAAA,CACC,eAAWC,EAAA,EAAQ,EACnB,YAAY,OACZ,QAAQ,UACR,QAASxB,GACT,UAAWH,EAAsB,UACjC,WAAYW,EAAkB,SAAW,EAC1C,SAAA,0BAAA,CAAA,EAGDO,EAAAA,IAACQ,EAAA,CACC,eAAWE,GAAA,EAAW,EACtB,YAAY,QACZ,QAAQ,UACT,SAAA,UAAA,CAAA,CAED,CAAA,CACF,CAAA,EACF,EAGAV,MAACW,EAAA,CAAK,GAAIzC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAA4B,EAAAA,IAACY,EAAA,CACC,SAAAd,EAAAA,KAACS,EAAA,CAAO,QAAS,EAAG,QAAQ,SAC1B,SAAA,CAAAT,OAACK,EAAA,CACC,SAAA,CAAAH,MAACa,GAAM,YAAY,OAAO,KAAK,KAC5B,WAAkB,MACrB,QACCP,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,OAAA,CAAK,CAAA,EACjD,SACCH,EAAA,CACC,SAAA,CAAAH,MAACa,GAAM,YAAY,MAAM,KAAK,KAC3B,WAAkB,OACrB,QACCP,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,WAAA,CAAS,CAAA,EACrD,SACCH,EAAA,CACC,SAAA,CAAAH,MAACa,GAAM,YAAY,QAAQ,KAAK,KAC7B,WAAkB,KACrB,QACCP,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,QAAA,CAAM,CAAA,EAClD,SACCH,EAAA,CACC,SAAA,CAAAH,EAAAA,IAACa,GAAM,YAAY,SAAS,KAAK,KAC9B,UAAAnC,GAAA,YAAAA,EAAO,kBAAmB,CAAA,CAC7B,QACC4B,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,YAAA,CAAU,CAAA,CAAA,CACtD,CAAA,CAAA,CACF,EACF,EACF,EAGAN,MAACW,EAAA,CAAK,GAAIzC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAA4B,EAAAA,IAACY,EAAA,CACC,SAAAd,EAAAA,KAACS,EAAA,CAAO,QAAS,EAAG,KAAK,OACvB,SAAA,CAAAT,EAAAA,KAACgB,GAAA,CAAW,KAAK,QACf,SAAA,CAAAd,EAAAA,IAACe,IAAiB,cAAc,OAC9B,eAACC,GAAA,CAAS,MAAM,WAAW,CAAA,CAC7B,EACAhB,EAAAA,IAACiB,GAAA,CACC,YAAY,2BACZ,MAAOpE,EACP,SAAWqE,GAAMpE,EAAcoE,EAAE,OAAO,KAAK,CAAA,CAAA,CAC/C,EACF,EACApB,EAAAA,KAACqB,EAAA,CACC,YAAY,mBACZ,MAAOnE,EACP,SAAWkE,GAAMjE,EAAciE,EAAE,OAAO,KAAK,EAC7C,KAAK,QAEL,SAAA,CAAAlB,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,OAAI,EACzBA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,UAAO,EAC/BA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,UAAO,EAC/BA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,QAAK,EAC3BA,EAAAA,IAAC,SAAA,CAAO,MAAM,SAAS,SAAA,QAAA,CAAM,CAAA,CAAA,CAAA,EAE/BF,EAAAA,KAACqB,EAAA,CACC,YAAY,wBACZ,MAAOjE,EACP,SAAWgE,GAAM/D,GAAkB+D,EAAE,OAAO,KAAK,EACjD,KAAK,QAEL,SAAA,CAAAlB,EAAAA,IAAC,SAAA,CAAO,MAAM,SAAS,SAAA,UAAO,EAC9BA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,UAAO,EAC5BA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,YAAS,EACjCA,EAAAA,IAAC,SAAA,CAAO,MAAM,WAAW,SAAA,YAAS,EAClCA,EAAAA,IAAC,SAAA,CAAO,MAAM,UAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CAAA,EAEjCF,EAAAA,KAACqB,EAAA,CACC,YAAY,qBACZ,MAAO/D,EACP,SAAW8D,GAAM7D,GAAc6D,EAAE,OAAO,KAAK,EAC7C,KAAK,QAEL,SAAA,CAAAlB,EAAAA,IAAC,SAAA,CAAO,MAAM,SAAS,SAAA,YAAS,EAChCA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,QAAA,CAAM,CAAA,CAAA,CAAA,CAC7B,CAAA,CACF,EACF,EACF,EAGAA,EAAAA,IAACW,GAAK,GAAIzC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,gBAACwC,EAAA,CACE,SAAA,CAAAtC,GACCwB,EAAAA,KAACI,EAAA,CAAI,UAAU,SAAS,GAAI,EAC1B,SAAA,CAAAF,EAAAA,IAACoB,GAAA,CAAQ,KAAK,IAAA,CAAK,EACnBpB,EAAAA,IAACM,EAAA,CAAK,GAAI,EAAG,SAAA,4BAAA,CAA0B,CAAA,CAAA,CACzC,QAECJ,EAAA,CAAI,UAAU,OACb,SAAAJ,EAAAA,KAACuB,GAAA,CAAM,QAAQ,SACb,SAAA,CAAArB,EAAAA,IAACsB,GAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAAvB,EAAAA,IAACwB,GAAG,SAAA,QAAA,CAAM,EACVxB,EAAAA,IAACwB,GAAG,SAAA,QAAA,CAAM,EACVxB,EAAAA,IAACwB,GAAG,SAAA,MAAA,CAAI,EACRxB,EAAAA,IAACwB,GAAG,SAAA,WAAA,CAAS,EACbxB,EAAAA,IAACwB,GAAG,SAAA,OAAA,CAAK,EACTxB,EAAAA,IAACwB,GAAG,SAAA,UAAA,CAAQ,CAAA,CAAA,CACd,CAAA,CACF,QACCC,GAAA,CACE,UAAAC,EAAArD,GAAA,YAAAA,EAAmB,gBAAnB,YAAAqD,EAAkC,IAAKtC,GAA+B,CACrE,MAAMuC,EAAgBrF,EAAU8C,EAAa,IAA8B,GAAKwC,EAEhF,OACE9B,EAAAA,KAACyB,EAAA,CAEC,GAAKnC,EAAa,KAA0E,OAAnE,GAAG/C,EAAW+C,EAAa,IAA+B,CAAC,MACpF,OAAQ,CAAE,GAAI,GAAG/C,EAAW+C,EAAa,IAA+B,CAAC,MAAA,EACzE,OAAO,UACP,QAAS,IAAMD,EAAuBC,CAAY,EAElD,SAAA,CAAAY,EAAAA,IAAC6B,EAAA,CACC,gBAACtB,EAAA,CACE,SAAA,CAAAnB,EAAa,WACX0C,GAAA,CAAe,MAAM,OAAO,EAE7B9B,EAAAA,IAAC+B,GAAA,CAAW,MAAM,MAAA,CAAO,EAE1B,CAAC3C,EAAa,MACbY,EAAAA,IAACE,EAAA,CACC,EAAG,EACH,EAAG,EACH,aAAa,OACb,GAAI,GAAG7D,EAAW+C,EAAa,IAA+B,CAAC,MAAA,CAAA,CACjE,CAAA,CAEJ,CAAA,CACF,QACCyC,EAAA,CACC,SAAA/B,OAACK,GAAO,MAAM,QAAQ,QAAS,EAC7B,SAAA,CAAAH,EAAAA,IAACM,EAAA,CAAK,WAAW,WAAW,MAAQlB,EAAa,KAAoB,OAAb,WACrD,SAAAA,EAAa,KAAA,CAChB,EACAY,EAAAA,IAACM,GAAK,SAAS,KAAK,MAAM,WAAW,UAAW,EAC7C,SAAAlB,EAAa,OAAA,CAChB,CAAA,CAAA,CACF,CAAA,CACF,EACAY,EAAAA,IAAC6B,EAAA,CACC,SAAA/B,EAAAA,KAACS,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACE,EAAA,CAAI,GAAIyB,EAAe,MAAO,GAAGtF,EAAW+C,EAAa,IAA+B,CAAC,MAAA,CAAQ,EAClGY,EAAAA,IAACa,EAAA,CACC,YAAaxE,EAAW+C,EAAa,IAA+B,GAAK,OACzE,QAAQ,SAEP,SAAAA,EAAa,IAAA,CAAA,CAChB,CAAA,CACF,CAAA,CACF,QACCyC,EAAA,CACC,SAAA7B,EAAAA,IAACa,EAAA,CACC,YAAalE,GAAeyC,EAAa,QAAuC,GAAK,OACrF,QAAQ,SAEP,SAAAA,EAAa,QAAA,CAAA,EAElB,QACCyC,EAAA,CACC,SAAA/B,OAACK,GAAO,MAAM,QAAQ,QAAS,EAC7B,SAAA,CAAAH,MAACM,GAAK,SAAS,KAAM,SAAAjB,EAAgBD,EAAa,UAAU,EAAE,EAC9DY,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,MAAM,WACvB,SAAA,IAAI,KAAKlB,EAAa,UAAU,EAAE,mBAAA,CAAmB,CACxD,CAAA,CAAA,CACF,CAAA,CACF,EACAY,MAAC6B,EAAA,CACC,SAAA/B,EAAAA,KAACS,EAAA,CAAO,QAAS,EACf,SAAA,CAAAP,EAAAA,IAACgC,EAAA,CAAQ,MAAM,eACb,SAAAhC,EAAAA,IAACiC,EAAA,CACC,aAAW,eACX,WAAOC,GAAA,EAAM,EACb,KAAK,KACL,QAAQ,QACR,YAAY,OACZ,QAAUhB,GAAM,CACdA,EAAE,gBAAA,EACF/B,EAAuBC,CAAY,CACrC,CAAA,CAAA,EAEJ,EACC,CAACA,EAAa,MACbY,MAACgC,EAAA,CAAQ,MAAM,oBACb,SAAAhC,EAAAA,IAACiC,EAAA,CACC,aAAW,oBACX,WAAOxB,EAAA,EAAQ,EACf,KAAK,KACL,QAAQ,QACR,YAAY,QACZ,QAAUS,GAAM,CACdA,EAAE,gBAAA,EACFlC,EAAiBI,EAAa,EAAE,CAClC,CAAA,CAAA,EAEJ,SAED+C,GAAA,CACC,SAAA,CAAAnC,EAAAA,IAACoC,GAAA,CACC,GAAIH,EACJ,aAAW,eACX,WAAOI,GAAA,EAAY,EACnB,KAAK,KACL,QAAQ,QACR,QAAUnB,GAAMA,EAAE,gBAAA,CAAgB,CAAA,SAEnCoB,GAAA,CACC,SAAA,CAAAtC,MAACuC,EAAA,CAAS,KAAMvC,EAAAA,IAACwC,GAAA,EAAO,EAAI,SAAA,cAE5B,QACCD,EAAA,CAAS,KAAMvC,EAAAA,IAACyC,GAAA,EAAQ,EAAI,SAAA,gBAE7B,QACCC,GAAA,EAAY,EACb1C,EAAAA,IAACuC,EAAA,CACC,WAAOI,GAAA,EAAQ,EACf,MAAM,UACN,QAAUzB,GAAM,CACdA,EAAE,gBAAA,EACFhC,GAAaE,EAAa,EAAE,CAC9B,EACD,SAAA,UAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,EAxHKA,EAAa,EAAA,CA2HxB,EAAC,CACH,CAAA,CAAA,CACF,CAAA,CACF,GAIDf,GAAA,YAAAA,EAAmB,aAClB2B,EAAAA,IAACI,EAAA,CAAK,QAAQ,SAAS,GAAI,EACzB,SAAAN,EAAAA,KAACS,EAAA,CAAO,QAAS,EACf,SAAA,CAAAP,EAAAA,IAACQ,EAAA,CACC,KAAK,KACL,QAAS,IAAMjD,EAAeD,EAAc,CAAC,EAC7C,WAAYA,IAAgB,EAC7B,SAAA,UAAA,CAAA,SAGAgD,EAAA,CAAK,SAAA,CAAA,UACIhD,EAAY,OAAKe,EAAkB,WAAW,UAAA,EACxD,EACA2B,EAAAA,IAACQ,EAAA,CACC,KAAK,KACL,QAAS,IAAMjD,EAAeD,EAAc,CAAC,EAC7C,WAAYA,IAAgBe,EAAkB,WAAW,WAC1D,SAAA,WAAA,CAAA,CAED,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EAGAyB,EAAAA,KAAC8C,GAAA,CAAM,OAAAlF,GAAgB,QAAAE,EAAkB,KAAK,KAC5C,SAAA,CAAAoC,EAAAA,IAAC6C,GAAA,EAAa,SACbC,GAAA,CACC,SAAA,CAAA9C,EAAAA,IAAC+C,GAAA,CACC,gBAACxC,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACE,EAAA,CACC,GAAI5D,EAAUkB,GAAA,YAAAA,EAAsB,IAA8B,GAAKoE,EACvE,MAAO,GAAGvF,EAAWmB,GAAA,YAAAA,EAAsB,IAA+B,CAAC,MAAA,CAAA,EAE7EwC,EAAAA,IAACM,GAAK,SAAA,6BAAA,CAA2B,CAAA,CAAA,CACnC,CAAA,CACF,EACAN,EAAAA,IAACgD,IACE,SAAAxF,GACCsC,EAAAA,KAACK,GAAO,QAAS,EAAG,MAAM,UACxB,SAAA,CAAAL,OAACI,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBAAgB,GAAI,EAClC,SAAA,CAAAP,MAACM,GAAK,WAAW,WAAW,SAAS,KAClC,WAAqB,MACxB,EACAN,MAACa,GAAM,YAAaxE,EAAWmB,EAAqB,IAA+B,EAChF,WAAqB,IAAA,CACxB,CAAA,EACF,EACAsC,EAAAA,KAACQ,EAAA,CAAK,SAAS,KAAK,MAAM,WACvB,SAAA,CAAAjB,EAAgB7B,EAAqB,UAAU,EAAE,MAAIA,EAAqB,QAAA,CAAA,CAC7E,CAAA,EACF,QAECyF,GAAA,EAAQ,SAER/C,EAAA,CACC,SAAA,CAAAF,MAACM,EAAA,CAAK,WAAW,WAAW,GAAI,EAAG,SAAA,UAAO,EAC1CN,EAAAA,IAACM,EAAA,CAAM,SAAA9C,EAAqB,OAAA,CAAQ,CAAA,EACtC,EAECA,EAAqB,UACpBsC,EAAAA,KAACI,EAAA,CACC,SAAA,CAAAF,MAACM,EAAA,CAAK,WAAW,WAAW,GAAI,EAAG,SAAA,wBAAqB,EACxDN,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,MAAM,WACvB,SAAA,KAAK,UAAU9C,EAAqB,SAAU,KAAM,CAAC,CAAA,CACxD,CAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAEJ,EACAwC,MAACkD,GAAA,CACC,SAAApD,EAAAA,KAACS,EAAA,CAAO,QAAS,EACd,SAAA,CAAA/C,GAAwB,CAACA,EAAqB,MAC7CwC,EAAAA,IAACQ,EAAA,CACC,eAAWC,EAAA,EAAQ,EACnB,YAAY,QACZ,QAAS,IAAM,CACbzB,EAAiBxB,EAAqB,EAAE,EACxCI,EAAA,CACF,EACD,SAAA,mBAAA,CAAA,EAIHoC,EAAAA,IAACQ,EAAA,CAAO,QAAS5C,EAAS,SAAA,QAAA,CAAM,CAAA,CAAA,CAClC,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ"}