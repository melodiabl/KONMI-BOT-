{"version":3,"file":"simple-grid-6k9JvjOk.js","sources":["../../node_modules/@chakra-ui/react/dist/esm/grid/grid.mjs","../../node_modules/@chakra-ui/react/dist/esm/grid/simple-grid.mjs"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport { Grid };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mapResponsive } from '@chakra-ui/utils';\nimport { Grid } from './grid.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\nimport { getToken } from '../system/hooks.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport { SimpleGrid };\n"],"names":["Grid","forwardRef","props","ref","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","jsx","chakra","SimpleGrid","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","widthToColumns","countToColumns","toPx","n","width","mapResponsive","value","_value","getToken","count"],"mappings":"6EAKK,MAACA,EAAOC,EAAW,SAAeC,EAAOC,EAAK,CACjD,KAAM,CACJ,cAAAC,EACA,IAAAC,EACA,OAAAC,EACA,UAAAC,EACA,OAAAC,EACA,IAAAC,EACA,SAAAC,EACA,SAAAC,EACA,aAAAC,EACA,YAAAC,EACA,gBAAAC,EACA,GAAGC,CACP,EAAMb,EACEc,EAAS,CACb,QAAS,OACT,kBAAmBZ,EACnB,QAASC,EACT,WAAYC,EACZ,cAAeC,EACf,gBAAiBM,EACjB,WAAYL,EACZ,QAASC,EACT,aAAcC,EACd,aAAcC,EACd,iBAAkBC,EAClB,oBAAqBE,CACzB,EACE,OAAuBG,EAAAA,IAAIC,EAAO,IAAK,CAAE,IAAAf,EAAK,MAAOa,EAAQ,GAAGD,EAAM,CACxE,CAAC,EACDf,EAAK,YAAc,OC5Bd,MAACmB,EAAalB,EACjB,SAAqBC,EAAOC,EAAK,CAC/B,KAAM,CAAE,QAAAiB,EAAS,SAAAC,EAAU,SAAAC,EAAU,QAAAC,EAAS,cAAAC,EAAe,GAAGT,CAAI,EAAKb,EACnEuB,EAAQC,EAAQ,EAChBZ,EAAkBU,EAAgBG,EAAeH,EAAeC,CAAK,EAAIG,EAAeR,CAAO,EACrG,OAAuBH,EAAAA,IACrBjB,EACA,CACE,IAAAG,EACA,IAAKoB,EACL,UAAWF,EACX,OAAQC,EACR,gBAAAR,EACA,GAAGC,CACX,CACA,CACE,CACF,EACAI,EAAW,YAAc,aACzB,SAASU,EAAKC,EAAG,CACf,OAAO,OAAOA,GAAM,SAAW,GAAGA,CAAC,KAAOA,CAC5C,CACA,SAASH,EAAeI,EAAON,EAAO,CACpC,OAAOO,EAAcD,EAAQE,GAAU,CACrC,MAAMC,EAASC,EAAS,QAASF,EAAOJ,EAAKI,CAAK,CAAC,EAAER,CAAK,EAC1D,OAAOQ,IAAU,KAAO,KAAO,2BAA2BC,CAAM,SAClE,CAAC,CACH,CACA,SAASN,EAAeQ,EAAO,CAC7B,OAAOJ,EACLI,EACCH,GAAUA,IAAU,KAAO,KAAO,UAAUA,CAAK,mBACtD,CACA","x_google_ignoreList":[0,1]}