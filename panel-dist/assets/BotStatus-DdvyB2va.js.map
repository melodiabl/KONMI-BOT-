{"version":3,"file":"BotStatus-DdvyB2va.js","sources":["../../src/pages/BotStatus.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  Badge,\n  Icon,\n  useColorModeValue,\n  Flex,\n  Spacer,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  SimpleGrid,\n  Progress,\n  Divider,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n  Textarea,\n  FormControl,\n  FormLabel,\n  Input,\n  Switch,\n  Select,\n} from '@chakra-ui/react';\nimport {\n  FaPlay,\n  FaStop,\n  FaSync,\n  FaCog,\n  FaQrcode,\n  FaWhatsapp,\n  FaCheckCircle,\n  FaTimesCircle,\n  FaClock,\n  FaMobile,\n  FaWifi,\n  FaExclamationTriangle,\n  FaDownload,\n  FaUpload,\n} from 'react-icons/fa';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { apiService } from '../services/api';\n\nexport const BotStatus: React.FC = () => {\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\n  const [configData, setConfigData] = useState({\n    autoReconnect: true,\n    maxReconnectAttempts: 5,\n    reconnectInterval: 30,\n    logLevel: 'info',\n  });\n\n  const { isOpen: isQROpen, onOpen: onQROpen, onClose: onQROpenClose } = useDisclosure();\n  const toast = useToast();\n  const queryClient = useQueryClient();\n\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n\n  // Queries\n  const { data: botStatus, isLoading, error } = useQuery('botStatus', apiService.getBotStatus, {\n    refetchInterval: 5000, // Actualizar cada 5 segundos\n  });\n\n  const { data: botConfig } = useQuery('botConfig', apiService.getBotConfig);\n  const { data: qrCode, isLoading: qrLoading } = useQuery('botQR', apiService.getBotQR, {\n    enabled: !botStatus?.connected,\n    refetchInterval: !botStatus?.connected ? 10000 : false, // Actualizar QR cada 10 segundos si no está conectado\n  });\n\n  // Mutations\n  const restartBotMutation = useMutation(apiService.restartBot, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('botStatus');\n      toast({\n        title: 'Bot reiniciado',\n        description: 'El bot ha sido reiniciado exitosamente',\n        status: 'success',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al reiniciar el bot',\n        status: 'error',\n      });\n    },\n  });\n\n  const disconnectBotMutation = useMutation(apiService.disconnectBot, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('botStatus');\n      toast({\n        title: 'Bot desconectado',\n        description: 'El bot ha sido desconectado exitosamente',\n        status: 'success',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al desconectar el bot',\n        status: 'error',\n      });\n    },\n  });\n\n  const updateConfigMutation = useMutation(apiService.updateBotConfig, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('botConfig');\n      toast({\n        title: 'Configuración actualizada',\n        description: 'La configuración del bot ha sido actualizada',\n        status: 'success',\n      });\n      setIsConfigOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al actualizar configuración',\n        status: 'error',\n      });\n    },\n  });\n\n  const handleRestartBot = () => {\n    if (window.confirm('¿Estás seguro de que quieres reiniciar el bot?')) {\n      restartBotMutation.mutate();\n    }\n  };\n\n  const handleDisconnectBot = () => {\n    if (window.confirm('¿Estás seguro de que quieres desconectar el bot?')) {\n      disconnectBotMutation.mutate();\n    }\n  };\n\n  const handleUpdateConfig = () => {\n    updateConfigMutation.mutate(configData);\n  };\n\n  const getConnectionStatus = () => {\n    if (botStatus?.connected) {\n      return { status: 'success', text: 'Conectado', icon: FaCheckCircle };\n    } else if (botStatus?.connecting) {\n      return { status: 'warning', text: 'Conectando...', icon: FaSync };\n    } else {\n      return { status: 'error', text: 'Desconectado', icon: FaTimesCircle };\n    }\n  };\n\n  const connectionStatus = getConnectionStatus();\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        Error al cargar el estado del bot: {(error as any).message}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <VStack spacing={6} align=\"stretch\">\n        {/* Header */}\n        <Flex align=\"center\" justify=\"space-between\">\n          <Box>\n            <Heading size=\"lg\">Estado del Bot</Heading>\n            <Text color=\"gray.600\" mt={1}>\n              Monitoreo y control del bot de WhatsApp\n            </Text>\n          </Box>\n          <HStack spacing={3}>\n            <Button\n              leftIcon={<FaQrcode />}\n              colorScheme=\"blue\"\n              variant=\"outline\"\n              onClick={onQROpen}\n              isDisabled={botStatus?.connected}\n            >\n              Ver QR\n            </Button>\n            <Button\n              leftIcon={<FaCog />}\n              colorScheme=\"gray\"\n              variant=\"outline\"\n              onClick={() => setIsConfigOpen(true)}\n            >\n              Configuración\n            </Button>\n          </HStack>\n        </Flex>\n\n        {/* Estado Principal */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardHeader>\n            <HStack>\n              <Icon as={FaWhatsapp} color=\"green.500\" />\n              <Heading size=\"md\">Estado de Conexión</Heading>\n            </HStack>\n          </CardHeader>\n          <CardBody>\n            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={6}>\n              <Stat>\n                <StatLabel>Estado</StatLabel>\n                <StatNumber>\n                  <HStack>\n                    <Icon as={connectionStatus.icon} color={`${connectionStatus.status}.500`} />\n                    <Text color={`${connectionStatus.status}.400`}>\n                      {connectionStatus.text}\n                    </Text>\n                  </HStack>\n                </StatNumber>\n                <StatHelpText>\n                  {botStatus?.connected ? 'Bot funcionando correctamente' : 'Bot no está conectado'}\n                </StatHelpText>\n              </Stat>\n\n              <Stat>\n                <StatLabel>Número de Teléfono</StatLabel>\n                <StatNumber fontSize=\"lg\">\n                  {botStatus?.phone || 'No disponible'}\n                </StatNumber>\n                <StatHelpText>\n                  <Icon as={FaMobile} mr={1} />\n                  WhatsApp conectado\n                </StatHelpText>\n              </Stat>\n\n              <Stat>\n                <StatLabel>Tiempo Activo</StatLabel>\n                <StatNumber>{botStatus?.uptime || '0h 0m'}</StatNumber>\n                <StatHelpText>\n                  <Icon as={FaClock} mr={1} />\n                  Uptime del bot\n                </StatHelpText>\n              </Stat>\n\n              <Stat>\n                <StatLabel>Última Actividad</StatLabel>\n                <StatNumber fontSize=\"sm\">\n                  {botStatus?.lastSeen ? new Date(botStatus.lastSeen).toLocaleString() : 'N/A'}\n                </StatNumber>\n                <StatHelpText>Última vez activo</StatHelpText>\n              </Stat>\n            </SimpleGrid>\n\n            <Divider my={6} />\n\n            {/* Controles */}\n            <HStack spacing={4} justify=\"center\">\n              <Button\n                leftIcon={<FaPlay />}\n                colorScheme=\"green\"\n                size=\"lg\"\n                onClick={handleRestartBot}\n                isLoading={restartBotMutation.isLoading}\n                isDisabled={!botStatus?.connected}\n              >\n                Reiniciar Bot\n              </Button>\n              <Button\n                leftIcon={<FaStop />}\n                colorScheme=\"red\"\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={handleDisconnectBot}\n                isLoading={disconnectBotMutation.isLoading}\n                isDisabled={!botStatus?.connected}\n              >\n                Desconectar Bot\n              </Button>\n              <Button\n                leftIcon={<FaSync />}\n                colorScheme=\"blue\"\n                variant=\"outline\"\n                size=\"lg\"\n                onClick={() => queryClient.invalidateQueries('botStatus')}\n                isLoading={isLoading}\n              >\n                Actualizar\n              </Button>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Información Detallada */}\n        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={6}>\n          {/* Configuración Actual */}\n          <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n            <CardHeader>\n              <Heading size=\"md\">Configuración Actual</Heading>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={4} align=\"stretch\">\n                <HStack justify=\"space-between\">\n                  <Text>Auto Reconexión</Text>\n                  <Badge colorScheme={botConfig?.autoReconnect ? 'green' : 'red'}>\n                    {botConfig?.autoReconnect ? 'Activada' : 'Desactivada'}\n                  </Badge>\n                </HStack>\n                <HStack justify=\"space-between\">\n                  <Text>Intentos de Reconexión</Text>\n                  <Text fontWeight=\"semibold\">{botConfig?.maxReconnectAttempts || 5}</Text>\n                </HStack>\n                <HStack justify=\"space-between\">\n                  <Text>Intervalo de Reconexión</Text>\n                  <Text fontWeight=\"semibold\">{botConfig?.reconnectInterval || 30}s</Text>\n                </HStack>\n                <HStack justify=\"space-between\">\n                  <Text>Nivel de Log</Text>\n                  <Badge colorScheme=\"blue\">{botConfig?.logLevel || 'info'}</Badge>\n                </HStack>\n              </VStack>\n            </CardBody>\n          </Card>\n\n          {/* Estadísticas de Conexión */}\n          <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n            <CardHeader>\n              <Heading size=\"md\">Estadísticas de Conexión</Heading>\n            </CardHeader>\n            <CardBody>\n              <VStack spacing={4} align=\"stretch\">\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\">Estabilidad de Conexión</Text>\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\">85%</Text>\n                  </HStack>\n                  <Progress value={85} colorScheme=\"green\" />\n                </Box>\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\">Tiempo de Respuesta</Text>\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\">120ms</Text>\n                  </HStack>\n                  <Progress value={75} colorScheme=\"blue\" />\n                </Box>\n                <Box>\n                  <HStack justify=\"space-between\" mb={2}>\n                    <Text fontSize=\"sm\">Mensajes Procesados</Text>\n                    <Text fontSize=\"sm\" fontWeight=\"semibold\">1,234</Text>\n                  </HStack>\n                  <Progress value={90} colorScheme=\"purple\" />\n                </Box>\n              </VStack>\n            </CardBody>\n          </Card>\n        </SimpleGrid>\n\n        {/* Alertas */}\n        {!botStatus?.connected && (\n          <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n            <CardBody>\n              <Alert status=\"warning\">\n                <AlertIcon />\n                <Box>\n                  <Text fontWeight=\"semibold\">Bot desconectado</Text>\n                  <Text fontSize=\"sm\">\n                    El bot no está conectado. Escanea el código QR para conectarlo a WhatsApp.\n                  </Text>\n                </Box>\n              </Alert>\n            </CardBody>\n          </Card>\n        )}\n      </VStack>\n\n      {/* Modal de Código QR */}\n      <Modal isOpen={isQROpen} onClose={onQROpenClose} size=\"md\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Conectar Bot a WhatsApp</ModalHeader>\n          <ModalBody>\n            <VStack spacing={4}>\n              <Text textAlign=\"center\" color=\"gray.600\">\n                Escanea este código QR con tu WhatsApp para conectar el bot\n              </Text>\n              {qrLoading ? (\n                <Box textAlign=\"center\" py={8}>\n                  <Spinner size=\"xl\" />\n                  <Text mt={4}>Generando código QR...</Text>\n                </Box>\n              ) : qrCode?.qr ? (\n                <Box textAlign=\"center\">\n                  <Image\n                    src={`data:image/png;base64,${qrCode.qr}`}\n                    alt=\"QR Code\"\n                    maxW=\"300px\"\n                    mx=\"auto\"\n                  />\n                </Box>\n              ) : (\n                <Box textAlign=\"center\" py={8}>\n                  <Text color=\"red.500\">Error al generar el código QR</Text>\n                  <Text fontSize=\"sm\" color=\"gray.500\" mt={2}>\n                    Intenta cerrar y abrir este modal nuevamente\n                  </Text>\n                </Box>\n              )}\n              <Text fontSize=\"sm\" color=\"gray.500\" textAlign=\"center\">\n                El código QR se actualiza automáticamente cada 10 segundos\n              </Text>\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button \n              leftIcon={<FaSync />} \n              onClick={() => queryClient.invalidateQueries('botQR')}\n              isLoading={qrLoading}\n              mr={3}\n            >\n              Refrescar QR\n            </Button>\n            <Button onClick={onQROpenClose}>Cerrar</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      {/* Modal de Configuración */}\n      <Modal isOpen={isConfigOpen} onClose={() => setIsConfigOpen(false)} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Configuración del Bot</ModalHeader>\n          <ModalBody>\n            <VStack spacing={4}>\n              <FormControl display=\"flex\" alignItems=\"center\">\n                <FormLabel mb=\"0\">\n                  <HStack>\n                    <FaWifi />\n                    <Text>Auto Reconexión</Text>\n                  </HStack>\n                </FormLabel>\n                <Switch\n                  isChecked={configData.autoReconnect}\n                  onChange={(e) => setConfigData({ ...configData, autoReconnect: e.target.checked })}\n                  colorScheme=\"green\"\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Intentos de Reconexión</FormLabel>\n                <Input\n                  type=\"number\"\n                  value={configData.maxReconnectAttempts}\n                  onChange={(e) => setConfigData({ ...configData, maxReconnectAttempts: parseInt(e.target.value) })}\n                  min={1}\n                  max={10}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Intervalo de Reconexión (segundos)</FormLabel>\n                <Input\n                  type=\"number\"\n                  value={configData.reconnectInterval}\n                  onChange={(e) => setConfigData({ ...configData, reconnectInterval: parseInt(e.target.value) })}\n                  min={5}\n                  max={300}\n                />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel>Nivel de Log</FormLabel>\n                <Select\n                  value={configData.logLevel}\n                  onChange={(e) => setConfigData({ ...configData, logLevel: e.target.value })}\n                >\n                  <option value=\"error\">Error</option>\n                  <option value=\"warn\">Warning</option>\n                  <option value=\"info\">Info</option>\n                  <option value=\"debug\">Debug</option>\n                </Select>\n              </FormControl>\n            </VStack>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"ghost\" mr={3} onClick={() => setIsConfigOpen(false)}>\n              Cancelar\n            </Button>\n            <Button\n              colorScheme=\"blue\"\n              onClick={handleUpdateConfig}\n              isLoading={updateConfigMutation.isLoading}\n            >\n              Guardar Configuración\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default BotStatus;\n\n\n\n"],"names":["BotStatus","isConfigOpen","setIsConfigOpen","useState","configData","setConfigData","isQROpen","onQROpen","onQROpenClose","useDisclosure","toast","useToast","queryClient","useQueryClient","cardBg","useColorModeValue","borderColor","botStatus","isLoading","error","useQuery","apiService","botConfig","qrCode","qrLoading","restartBotMutation","useMutation","disconnectBotMutation","updateConfigMutation","handleRestartBot","handleDisconnectBot","handleUpdateConfig","connectionStatus","FaCheckCircle","FaSync","FaTimesCircle","jsxs","Alert","jsx","AlertIcon","Box","VStack","Flex","Heading","Text","HStack","Button","FaQrcode","FaCog","Card","CardHeader","Icon","FaWhatsapp","CardBody","SimpleGrid","Stat","StatLabel","StatNumber","StatHelpText","FaMobile","FaClock","Divider","FaPlay","FaStop","Badge","Progress","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","Spinner","Image","ModalFooter","FormControl","FormLabel","FaWifi","Switch","e","Input","Select"],"mappings":"+6BA6DO,MAAMA,GAAsB,IAAM,CACvC,KAAM,CAACC,GAAcC,CAAe,EAAIC,EAAAA,SAAS,EAAK,EAChD,CAACC,EAAYC,CAAa,EAAIF,WAAS,CAC3C,cAAe,GACf,qBAAsB,EACtB,kBAAmB,GACnB,SAAU,MAAA,CACX,EAEK,CAAE,OAAQG,GAAU,OAAQC,GAAU,QAASC,CAAA,EAAkBC,GAAA,EACjEC,EAAQC,GAAA,EACRC,EAAcC,GAAA,EAEdC,EAASC,EAAkB,QAAS,UAAU,EAC9CC,EAAcD,EAAkB,WAAY,UAAU,EAGtD,CAAE,KAAME,EAAW,UAAAC,GAAW,MAAAC,GAAUC,EAAS,YAAaC,EAAW,aAAc,CAC3F,gBAAiB,GAAA,CAClB,EAEK,CAAE,KAAMC,CAAA,EAAcF,EAAS,YAAaC,EAAW,YAAY,EACnE,CAAE,KAAME,EAAQ,UAAWC,GAAcJ,EAAS,QAASC,EAAW,SAAU,CACpF,QAAS,EAACJ,GAAA,MAAAA,EAAW,WACrB,gBAAkBA,GAAA,MAAAA,EAAW,UAAoB,GAAR,GAAQ,CAClD,EAGKQ,EAAqBC,EAAYL,EAAW,WAAY,CAC5D,UAAW,IAAM,CACfT,EAAY,kBAAkB,WAAW,EACzCF,EAAM,CACJ,MAAO,iBACP,YAAa,yCACb,OAAQ,SAAA,CACT,CACH,EACA,QAAUS,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,4BAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACD,EAEKQ,EAAwBD,EAAYL,EAAW,cAAe,CAClE,UAAW,IAAM,CACfT,EAAY,kBAAkB,WAAW,EACzCF,EAAM,CACJ,MAAO,mBACP,YAAa,2CACb,OAAQ,SAAA,CACT,CACH,EACA,QAAUS,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,8BAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACD,EAEKS,EAAuBF,EAAYL,EAAW,gBAAiB,CACnE,UAAW,IAAM,CACfT,EAAY,kBAAkB,WAAW,EACzCF,EAAM,CACJ,MAAO,4BACP,YAAa,+CACb,OAAQ,SAAA,CACT,EACDR,EAAgB,EAAK,CACvB,EACA,QAAUiB,GAAe,SACvBT,EAAM,CACJ,MAAO,QACP,cAAaS,GAAAA,EAAAA,EAAM,WAANA,YAAAA,EAAgB,OAAhBA,YAAAA,EAAsB,UAAW,oCAC9C,OAAQ,OAAA,CACT,CACH,CAAA,CACD,EAEKU,GAAmB,IAAM,CACzB,OAAO,QAAQ,gDAAgD,GACjEJ,EAAmB,OAAA,CAEvB,EAEMK,GAAsB,IAAM,CAC5B,OAAO,QAAQ,kDAAkD,GACnEH,EAAsB,OAAA,CAE1B,EAEMI,GAAqB,IAAM,CAC/BH,EAAqB,OAAOxB,CAAU,CACxC,EAYM4B,EATAf,GAAA,MAAAA,EAAW,UACN,CAAE,OAAQ,UAAW,KAAM,YAAa,KAAMgB,EAAA,EAC5ChB,GAAA,MAAAA,EAAW,WACb,CAAE,OAAQ,UAAW,KAAM,gBAAiB,KAAMiB,CAAA,EAElD,CAAE,OAAQ,QAAS,KAAM,eAAgB,KAAMC,EAAA,EAM1D,OAAIhB,EAEAiB,EAAAA,KAACC,EAAA,CAAM,OAAO,QACZ,SAAA,CAAAC,EAAAA,IAACC,EAAA,EAAU,EAAE,sCACwBpB,EAAc,OAAA,EACrD,SAKDqB,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACK,EAAA,CAAO,QAAS,EAAG,MAAM,UAExB,SAAA,CAAAL,EAAAA,KAACM,GAAA,CAAK,MAAM,SAAS,QAAQ,gBAC3B,SAAA,CAAAN,OAACI,EAAA,CACC,SAAA,CAAAF,EAAAA,IAACK,EAAA,CAAQ,KAAK,KAAK,SAAA,iBAAc,QAChCC,EAAA,CAAK,MAAM,WAAW,GAAI,EAAG,SAAA,yCAAA,CAE9B,CAAA,EACF,EACAR,EAAAA,KAACS,EAAA,CAAO,QAAS,EACf,SAAA,CAAAP,EAAAA,IAACQ,EAAA,CACC,eAAWC,GAAA,EAAS,EACpB,YAAY,OACZ,QAAQ,UACR,QAASxC,GACT,WAAYU,GAAA,YAAAA,EAAW,UACxB,SAAA,QAAA,CAAA,EAGDqB,EAAAA,IAACQ,EAAA,CACC,eAAWE,GAAA,EAAM,EACjB,YAAY,OACZ,QAAQ,UACR,QAAS,IAAM9C,EAAgB,EAAI,EACpC,SAAA,eAAA,CAAA,CAED,CAAA,CACF,CAAA,EACF,SAGC+C,EAAA,CAAK,GAAInC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAA,CAAAsB,EAAAA,IAACY,EAAA,CACC,gBAACL,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACa,EAAA,CAAK,GAAIC,GAAY,MAAM,YAAY,EACxCd,EAAAA,IAACK,EAAA,CAAQ,KAAK,KAAK,SAAA,oBAAA,CAAkB,CAAA,CAAA,CACvC,CAAA,CACF,SACCU,EAAA,CACC,SAAA,CAAAjB,EAAAA,KAACkB,EAAA,CAAW,QAAS,CAAE,KAAM,EAAG,GAAI,EAAG,GAAI,CAAA,EAAK,QAAS,EACvD,SAAA,CAAAlB,OAACmB,EAAA,CACC,SAAA,CAAAjB,EAAAA,IAACkB,GAAU,SAAA,QAAA,CAAM,EACjBlB,EAAAA,IAACmB,EAAA,CACC,SAAArB,EAAAA,KAACS,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACa,EAAA,CAAK,GAAInB,EAAiB,KAAM,MAAO,GAAGA,EAAiB,MAAM,MAAA,CAAQ,EAC1EM,EAAAA,IAACM,GAAK,MAAO,GAAGZ,EAAiB,MAAM,OACpC,WAAiB,IAAA,CACpB,CAAA,CAAA,CACF,CAAA,CACF,EACAM,EAAAA,IAACoB,EAAA,CACE,SAAAzC,GAAA,MAAAA,EAAW,UAAY,gCAAkC,uBAAA,CAC5D,CAAA,EACF,SAECsC,EAAA,CACC,SAAA,CAAAjB,EAAAA,IAACkB,GAAU,SAAA,oBAAA,CAAkB,QAC5BC,EAAA,CAAW,SAAS,KAClB,UAAAxC,GAAA,YAAAA,EAAW,QAAS,gBACvB,SACCyC,EAAA,CACC,SAAA,CAAApB,EAAAA,IAACa,EAAA,CAAK,GAAIQ,GAAU,GAAI,EAAG,EAAE,oBAAA,CAAA,CAE/B,CAAA,EACF,SAECJ,EAAA,CACC,SAAA,CAAAjB,EAAAA,IAACkB,GAAU,SAAA,eAAA,CAAa,EACxBlB,EAAAA,IAACmB,EAAA,CAAY,UAAAxC,GAAA,YAAAA,EAAW,SAAU,QAAQ,SACzCyC,EAAA,CACC,SAAA,CAAApB,EAAAA,IAACa,EAAA,CAAK,GAAIS,GAAS,GAAI,EAAG,EAAE,gBAAA,CAAA,CAE9B,CAAA,EACF,SAECL,EAAA,CACC,SAAA,CAAAjB,EAAAA,IAACkB,GAAU,SAAA,kBAAA,CAAgB,EAC3BlB,EAAAA,IAACmB,EAAA,CAAW,SAAS,KAClB,SAAAxC,GAAA,MAAAA,EAAW,SAAW,IAAI,KAAKA,EAAU,QAAQ,EAAE,eAAA,EAAmB,KAAA,CACzE,EACAqB,EAAAA,IAACoB,GAAa,SAAA,mBAAA,CAAiB,CAAA,CAAA,CACjC,CAAA,EACF,EAEApB,EAAAA,IAACuB,GAAA,CAAQ,GAAI,CAAA,CAAG,EAGhBzB,EAAAA,KAACS,EAAA,CAAO,QAAS,EAAG,QAAQ,SAC1B,SAAA,CAAAP,EAAAA,IAACQ,EAAA,CACC,eAAWgB,GAAA,EAAO,EAClB,YAAY,QACZ,KAAK,KACL,QAASjC,GACT,UAAWJ,EAAmB,UAC9B,WAAY,EAACR,GAAA,MAAAA,EAAW,WACzB,SAAA,eAAA,CAAA,EAGDqB,EAAAA,IAACQ,EAAA,CACC,eAAWiB,GAAA,EAAO,EAClB,YAAY,MACZ,QAAQ,UACR,KAAK,KACL,QAASjC,GACT,UAAWH,EAAsB,UACjC,WAAY,EAACV,GAAA,MAAAA,EAAW,WACzB,SAAA,iBAAA,CAAA,EAGDqB,EAAAA,IAACQ,EAAA,CACC,eAAWZ,EAAA,EAAO,EAClB,YAAY,OACZ,QAAQ,UACR,KAAK,KACL,QAAS,IAAMtB,EAAY,kBAAkB,WAAW,EACxD,UAAAM,GACD,SAAA,YAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAkB,EAAAA,KAACkB,EAAA,CAAW,QAAS,CAAE,KAAM,EAAG,GAAI,CAAA,EAAK,QAAS,EAEhD,SAAA,CAAAlB,OAACa,EAAA,CAAK,GAAInC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAA,CAAAsB,EAAAA,IAACY,GACC,SAAAZ,EAAAA,IAACK,EAAA,CAAQ,KAAK,KAAK,gCAAoB,CAAA,CACzC,QACCU,EAAA,CACC,SAAAjB,OAACK,GAAO,QAAS,EAAG,MAAM,UACxB,SAAA,CAAAL,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBACd,SAAA,CAAAP,EAAAA,IAACM,GAAK,SAAA,iBAAA,CAAe,EACrBN,EAAAA,IAAC0B,EAAA,CAAM,YAAa1C,GAAA,MAAAA,EAAW,cAAgB,QAAU,MACtD,SAAAA,GAAA,MAAAA,EAAW,cAAgB,WAAa,aAAA,CAC3C,CAAA,EACF,EACAc,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBACd,SAAA,CAAAP,EAAAA,IAACM,GAAK,SAAA,wBAAA,CAAsB,QAC3BA,EAAA,CAAK,WAAW,WAAY,UAAAtB,GAAA,YAAAA,EAAW,uBAAwB,CAAA,CAAE,CAAA,EACpE,EACAc,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBACd,SAAA,CAAAP,EAAAA,IAACM,GAAK,SAAA,yBAAA,CAAuB,EAC7BR,EAAAA,KAACQ,EAAA,CAAK,WAAW,WAAY,SAAA,EAAAtB,GAAA,YAAAA,EAAW,oBAAqB,GAAG,GAAA,CAAA,CAAC,CAAA,EACnE,EACAc,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBACd,SAAA,CAAAP,EAAAA,IAACM,GAAK,SAAA,cAAA,CAAY,QACjBoB,EAAA,CAAM,YAAY,OAAQ,UAAA1C,GAAA,YAAAA,EAAW,WAAY,MAAA,CAAO,CAAA,CAAA,CAC3D,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,SAGC2B,EAAA,CAAK,GAAInC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAA,CAAAsB,EAAAA,IAACY,GACC,SAAAZ,EAAAA,IAACK,EAAA,CAAQ,KAAK,KAAK,oCAAwB,CAAA,CAC7C,QACCU,EAAA,CACC,SAAAjB,OAACK,GAAO,QAAS,EAAG,MAAM,UACxB,SAAA,CAAAL,OAACI,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBAAgB,GAAI,EAClC,SAAA,CAAAP,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,SAAA,0BAAuB,QAC1CA,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,KAAA,CAAG,CAAA,EAC/C,EACAN,EAAAA,IAAC2B,EAAA,CAAS,MAAO,GAAI,YAAY,OAAA,CAAQ,CAAA,EAC3C,SACCzB,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBAAgB,GAAI,EAClC,SAAA,CAAAP,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,SAAA,sBAAmB,QACtCA,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,OAAA,CAAK,CAAA,EACjD,EACAN,EAAAA,IAAC2B,EAAA,CAAS,MAAO,GAAI,YAAY,MAAA,CAAO,CAAA,EAC1C,SACCzB,EAAA,CACC,SAAA,CAAAJ,EAAAA,KAACS,EAAA,CAAO,QAAQ,gBAAgB,GAAI,EAClC,SAAA,CAAAP,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,SAAA,sBAAmB,QACtCA,EAAA,CAAK,SAAS,KAAK,WAAW,WAAW,SAAA,OAAA,CAAK,CAAA,EACjD,EACAN,EAAAA,IAAC2B,EAAA,CAAS,MAAO,GAAI,YAAY,QAAA,CAAS,CAAA,CAAA,CAC5C,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGC,EAAChD,GAAA,MAAAA,EAAW,YACXqB,MAACW,GAAK,GAAInC,EAAQ,OAAO,MAAM,YAAAE,EAC7B,SAAAsB,EAAAA,IAACe,EAAA,CACC,SAAAjB,EAAAA,KAACC,EAAA,CAAM,OAAO,UACZ,SAAA,CAAAC,EAAAA,IAACC,EAAA,EAAU,SACVC,EAAA,CACC,SAAA,CAAAF,EAAAA,IAACM,EAAA,CAAK,WAAW,WAAW,SAAA,mBAAgB,EAC5CN,EAAAA,IAACM,EAAA,CAAK,SAAS,KAAK,SAAA,4EAAA,CAEpB,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EAEJ,SAGCsB,EAAA,CAAM,OAAQ5D,GAAU,QAASE,EAAe,KAAK,KACpD,SAAA,CAAA8B,EAAAA,IAAC6B,EAAA,EAAa,SACbC,EAAA,CACC,SAAA,CAAA9B,EAAAA,IAAC+B,GAAY,SAAA,yBAAA,CAAuB,EACpC/B,MAACgC,EAAA,CACC,SAAAlC,EAAAA,KAACK,EAAA,CAAO,QAAS,EACf,SAAA,CAAAH,MAACM,EAAA,CAAK,UAAU,SAAS,MAAM,WAAW,SAAA,8DAE1C,EACCpB,EACCY,EAAAA,KAACI,EAAA,CAAI,UAAU,SAAS,GAAI,EAC1B,SAAA,CAAAF,EAAAA,IAACiC,GAAA,CAAQ,KAAK,IAAA,CAAK,EACnBjC,EAAAA,IAACM,EAAA,CAAK,GAAI,EAAG,SAAA,wBAAA,CAAsB,CAAA,EACrC,EACErB,GAAA,MAAAA,EAAQ,GACVe,EAAAA,IAACE,EAAA,CAAI,UAAU,SACb,SAAAF,EAAAA,IAACkC,GAAA,CACC,IAAK,yBAAyBjD,EAAO,EAAE,GACvC,IAAI,UACJ,KAAK,QACL,GAAG,MAAA,CAAA,EAEP,EAEAa,EAAAA,KAACI,GAAI,UAAU,SAAS,GAAI,EAC1B,SAAA,CAAAF,EAAAA,IAACM,EAAA,CAAK,MAAM,UAAU,SAAA,gCAA6B,EACnDN,EAAAA,IAACM,GAAK,SAAS,KAAK,MAAM,WAAW,GAAI,EAAG,SAAA,8CAAA,CAE5C,CAAA,EACF,EAEFN,EAAAA,IAACM,GAAK,SAAS,KAAK,MAAM,WAAW,UAAU,SAAS,SAAA,4DAAA,CAExD,CAAA,CAAA,CACF,CAAA,CACF,SACC6B,EAAA,CACC,SAAA,CAAAnC,EAAAA,IAACQ,EAAA,CACC,eAAWZ,EAAA,EAAO,EAClB,QAAS,IAAMtB,EAAY,kBAAkB,OAAO,EACpD,UAAWY,EACX,GAAI,EACL,SAAA,cAAA,CAAA,EAGDc,EAAAA,IAACQ,EAAA,CAAO,QAAStC,EAAe,SAAA,QAAA,CAAM,CAAA,CAAA,CACxC,CAAA,CAAA,CACF,CAAA,EACF,EAGA4B,EAAAA,KAAC8B,EAAA,CAAM,OAAQjE,GAAc,QAAS,IAAMC,EAAgB,EAAK,EAAG,KAAK,KACvE,SAAA,CAAAoC,EAAAA,IAAC6B,EAAA,EAAa,SACbC,EAAA,CACC,SAAA,CAAA9B,EAAAA,IAAC+B,GAAY,SAAA,uBAAA,CAAqB,EAClC/B,MAACgC,EAAA,CACC,SAAAlC,EAAAA,KAACK,EAAA,CAAO,QAAS,EACf,SAAA,CAAAL,EAAAA,KAACsC,EAAA,CAAY,QAAQ,OAAO,WAAW,SACrC,SAAA,CAAApC,MAACqC,EAAA,CAAU,GAAG,IACZ,SAAAvC,EAAAA,KAACS,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACsC,GAAA,EAAO,EACRtC,EAAAA,IAACM,GAAK,SAAA,iBAAA,CAAe,CAAA,CAAA,CACvB,CAAA,CACF,EACAN,EAAAA,IAACuC,GAAA,CACC,UAAWzE,EAAW,cACtB,SAAW0E,GAAMzE,EAAc,CAAE,GAAGD,EAAY,cAAe0E,EAAE,OAAO,QAAS,EACjF,YAAY,OAAA,CAAA,CACd,EACF,SAECJ,EAAA,CACC,SAAA,CAAApC,EAAAA,IAACqC,GAAU,SAAA,wBAAA,CAAsB,EACjCrC,EAAAA,IAACyC,GAAA,CACC,KAAK,SACL,MAAO3E,EAAW,qBAClB,SAAW0E,GAAMzE,EAAc,CAAE,GAAGD,EAAY,qBAAsB,SAAS0E,EAAE,OAAO,KAAK,EAAG,EAChG,IAAK,EACL,IAAK,EAAA,CAAA,CACP,EACF,SAECJ,EAAA,CACC,SAAA,CAAApC,EAAAA,IAACqC,GAAU,SAAA,oCAAA,CAAkC,EAC7CrC,EAAAA,IAACyC,GAAA,CACC,KAAK,SACL,MAAO3E,EAAW,kBAClB,SAAW0E,GAAMzE,EAAc,CAAE,GAAGD,EAAY,kBAAmB,SAAS0E,EAAE,OAAO,KAAK,EAAG,EAC7F,IAAK,EACL,IAAK,GAAA,CAAA,CACP,EACF,SAECJ,EAAA,CACC,SAAA,CAAApC,EAAAA,IAACqC,GAAU,SAAA,cAAA,CAAY,EACvBvC,EAAAA,KAAC4C,GAAA,CACC,MAAO5E,EAAW,SAClB,SAAW0E,GAAMzE,EAAc,CAAE,GAAGD,EAAY,SAAU0E,EAAE,OAAO,MAAO,EAE1E,SAAA,CAAAxC,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,QAAK,EAC3BA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,UAAO,EAC5BA,EAAAA,IAAC,SAAA,CAAO,MAAM,OAAO,SAAA,OAAI,EACzBA,EAAAA,IAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,OAAA,CAAK,CAAA,CAAA,CAAA,CAC7B,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,SACCmC,EAAA,CACC,SAAA,CAAAnC,EAAAA,IAACQ,EAAA,CAAO,QAAQ,QAAQ,GAAI,EAAG,QAAS,IAAM5C,EAAgB,EAAK,EAAG,SAAA,UAAA,CAEtE,EACAoC,EAAAA,IAACQ,EAAA,CACC,YAAY,OACZ,QAASf,GACT,UAAWH,EAAqB,UACjC,SAAA,uBAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ"}