{"version":3,"file":"Grupos-HS-4hcqH.js","sources":["../../src/pages/Grupos.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Badge,\n  IconButton,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Textarea,\n  Switch,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Flex,\n  Card,\n  CardBody,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  useColorModeValue,\n  Tooltip,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n  Select,\n} from '@chakra-ui/react';\nimport {\n  FaSearch,\n  FaPlus,\n  FaEdit,\n  FaTrash,\n  FaEye,\n  FaEllipsisV,\n  FaCheck,\n  FaTimes,\n  FaUsers,\n  FaWhatsapp,\n  FaShieldAlt,\n  FaStore,\n  FaCalendar,\n  FaUser,\n} from 'react-icons/fa';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { apiService } from '../services/api';\n\ninterface Group {\n  id: number;\n  nombre: string;\n  descripcion?: string;\n  wa_jid: string;\n  autorizado: boolean;\n  es_proveedor: boolean;\n  created_at: string;\n  updated_at: string;\n  usuario_id?: number;\n  usuario?: {\n    username: string;\n  };\n}\n\ninterface GroupFormData {\n  nombre: string;\n  descripcion: string;\n  wa_jid: string;\n  autorizado: boolean;\n  es_proveedor: boolean;\n}\n\nexport const Grupos: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [autorizadoFilter, setAutorizadoFilter] = useState('');\n  const [proveedorFilter, setProveedorFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [editingGroup, setEditingGroup] = useState<Group | null>(null);\n  const [formData, setFormData] = useState<GroupFormData>({\n    nombre: '',\n    descripcion: '',\n    wa_jid: '',\n    autorizado: false,\n    es_proveedor: false,\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n  const queryClient = useQueryClient();\n\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n\n  // Queries\n  const { data: gruposData, isLoading, error } = useQuery(\n    ['grupos', currentPage, searchTerm, autorizadoFilter, proveedorFilter],\n    () => apiService.getGroups(currentPage, 20, searchTerm)\n  );\n\n  const { data: stats } = useQuery('groupStats', apiService.getGroupStats);\n\n  // Mutations\n  const createGroupMutation = useMutation(apiService.createGrupo, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('grupos');\n      toast({\n        title: 'Grupo creado',\n        description: 'El grupo ha sido creado exitosamente',\n        status: 'success',\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al crear grupo',\n        status: 'error',\n      });\n    },\n  });\n\n  const updateGroupMutation = useMutation(\n    (data: { id: number; group: Partial<Group> }) =>\n      apiService.updateGrupo(data.id, data.group),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('grupos');\n        toast({\n          title: 'Grupo actualizado',\n          description: 'El grupo ha sido actualizado exitosamente',\n          status: 'success',\n        });\n        onClose();\n        resetForm();\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al actualizar grupo',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const deleteGroupMutation = useMutation(apiService.deleteGrupo, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('grupos');\n      toast({\n        title: 'Grupo eliminado',\n        description: 'El grupo ha sido eliminado exitosamente',\n        status: 'success',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al eliminar grupo',\n        status: 'error',\n      });\n    },\n  });\n\n  const authorizeGroupMutation = useMutation(\n    (data: { id: number; autorizado: boolean }) =>\n      apiService.authorizeGroup(data.id, data.autorizado),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('grupos');\n        toast({\n          title: 'Autorización actualizada',\n          description: 'La autorización del grupo ha sido actualizada',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al actualizar autorización',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const toggleProviderMutation = useMutation(\n    (data: { id: number; es_proveedor: boolean }) =>\n      apiService.toggleProvider(data.id, data.es_proveedor),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('grupos');\n        toast({\n          title: 'Estado de proveedor actualizado',\n          description: 'El estado de proveedor ha sido actualizado',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al actualizar estado de proveedor',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const resetForm = () => {\n    setFormData({\n      nombre: '',\n      descripcion: '',\n      wa_jid: '',\n      autorizado: false,\n      es_proveedor: false,\n    });\n    setEditingGroup(null);\n  };\n\n  const handleOpenCreate = () => {\n    resetForm();\n    onOpen();\n  };\n\n  const handleOpenEdit = (group: Group) => {\n    setEditingGroup(group);\n    setFormData({\n      nombre: group.nombre,\n      descripcion: group.descripcion || '',\n      wa_jid: group.wa_jid,\n      autorizado: group.autorizado,\n      es_proveedor: group.es_proveedor,\n    });\n    onOpen();\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingGroup) {\n      updateGroupMutation.mutate({\n        id: editingGroup.id,\n        group: formData,\n      });\n    } else {\n      createGroupMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (groupId: number) => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar este grupo?')) {\n      deleteGroupMutation.mutate(groupId);\n    }\n  };\n\n  const handleAutorizar = (groupId: number, autorizado: boolean) => {\n    authorizeGroupMutation.mutate({ id: groupId, autorizado });\n  };\n\n  const handleToggleProvider = (groupId: number, es_proveedor: boolean) => {\n    toggleProviderMutation.mutate({ id: groupId, es_proveedor });\n  };\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        Error al cargar grupos: {(error as any).message}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <VStack spacing={6} align=\"stretch\">\n        {/* Header */}\n        <Flex align=\"center\" justify=\"space-between\">\n          <Heading size=\"lg\">Gestión de Grupos</Heading>\n          <Button\n            leftIcon={<FaPlus />}\n            colorScheme=\"green\"\n            onClick={handleOpenCreate}\n          >\n            Nuevo Grupo\n          </Button>\n        </Flex>\n\n        {/* Estadísticas */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={8} justify=\"center\">\n              <Stat textAlign=\"center\">\n                <StatLabel>Total Grupos</StatLabel>\n                <StatNumber>{stats?.totalGrupos || 0}</StatNumber>\n                <StatHelpText>Registrados en el sistema</StatHelpText>\n              </Stat>\n              <Stat textAlign=\"center\">\n                <StatLabel>Autorizados</StatLabel>\n                <StatNumber color=\"green.500\">{stats?.gruposAutorizados || 0}</StatNumber>\n                <StatHelpText>Grupos autorizados</StatHelpText>\n              </Stat>\n              <Stat textAlign=\"center\">\n                <StatLabel>Proveedores</StatLabel>\n                <StatNumber color=\"blue.500\">{stats?.gruposProveedores || 0}</StatNumber>\n                <StatHelpText>Grupos proveedores</StatHelpText>\n              </Stat>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Filtros */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={4}>\n              <InputGroup maxW=\"300px\">\n                <InputLeftElement pointerEvents=\"none\">\n                  <FaSearch color=\"gray.300\" />\n                </InputLeftElement>\n                <Input\n                  placeholder=\"Buscar grupos...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </InputGroup>\n              <Select\n                placeholder=\"Filtrar por autorización\"\n                value={autorizadoFilter}\n                onChange={(e) => setAutorizadoFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"true\">Autorizados</option>\n                <option value=\"false\">No autorizados</option>\n              </Select>\n              <Select\n                placeholder=\"Filtrar por proveedor\"\n                value={proveedorFilter}\n                onChange={(e) => setProveedorFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"true\">Proveedores</option>\n                <option value=\"false\">No proveedores</option>\n              </Select>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Tabla */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            {isLoading ? (\n              <Box textAlign=\"center\" py={8}>\n                <Spinner size=\"xl\" />\n                <Text mt={4}>Cargando grupos...</Text>\n              </Box>\n            ) : (\n              <Box overflowX=\"auto\">\n                <Table variant=\"simple\">\n                  <Thead>\n                    <Tr>\n                      <Th>Grupo</Th>\n                      <Th>WhatsApp JID</Th>\n                      <Th>Autorizado</Th>\n                      <Th>Proveedor</Th>\n                      <Th>Usuario</Th>\n                      <Th>Fecha Creación</Th>\n                      <Th>Acciones</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {gruposData?.grupos?.map((group: Group) => (\n                      <Tr key={group.id}>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text fontWeight=\"semibold\">{group.nombre}</Text>\n                            {group.descripcion && (\n                              <Text fontSize=\"sm\" color=\"gray.500\" noOfLines={2}>\n                                {group.descripcion}\n                              </Text>\n                            )}\n                            <Text fontSize=\"xs\" color=\"gray.400\">\n                              ID: {group.id}\n                            </Text>\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <Text fontSize=\"sm\" fontFamily=\"mono\">\n                            {group.wa_jid}\n                          </Text>\n                        </Td>\n                        <Td>\n                          <Badge\n                            colorScheme={group.autorizado ? 'green' : 'red'}\n                            variant=\"subtle\"\n                          >\n                            {group.autorizado ? 'Autorizado' : 'No autorizado'}\n                          </Badge>\n                        </Td>\n                        <Td>\n                          <Badge\n                            colorScheme={group.es_proveedor ? 'blue' : 'gray'}\n                            variant=\"subtle\"\n                          >\n                            {group.es_proveedor ? 'Proveedor' : 'Usuario'}\n                          </Badge>\n                        </Td>\n                        <Td>\n                          {group.usuario ? (\n                            <Text fontSize=\"sm\">{group.usuario.username}</Text>\n                          ) : (\n                            <Text fontSize=\"sm\" color=\"gray.500\">\n                              Sin asignar\n                            </Text>\n                          )}\n                        </Td>\n                        <Td>\n                          <Text fontSize=\"sm\">\n                            {new Date(group.created_at).toLocaleDateString()}\n                          </Text>\n                        </Td>\n                        <Td>\n                          <HStack spacing={2}>\n                            <Tooltip label=\"Ver detalles\">\n                              <IconButton\n                                aria-label=\"Ver detalles\"\n                                icon={<FaEye />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                colorScheme=\"blue\"\n                              />\n                            </Tooltip>\n                            <Tooltip label=\"Editar grupo\">\n                              <IconButton\n                                aria-label=\"Editar grupo\"\n                                icon={<FaEdit />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                colorScheme=\"orange\"\n                                onClick={() => handleOpenEdit(group)}\n                              />\n                            </Tooltip>\n                            <Menu>\n                              <MenuButton\n                                as={IconButton}\n                                aria-label=\"Más opciones\"\n                                icon={<FaEllipsisV />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                              />\n                              <MenuList>\n                                <MenuItem\n                                  icon={group.autorizado ? <FaTimes /> : <FaCheck />}\n                                  onClick={() => handleAutorizar(group.id, !group.autorizado)}\n                                >\n                                  {group.autorizado ? 'Desautorizar' : 'Autorizar'}\n                                </MenuItem>\n                                <MenuItem\n                                  icon={<FaStore />}\n                                  onClick={() => handleToggleProvider(group.id, !group.es_proveedor)}\n                                >\n                                  {group.es_proveedor ? 'Quitar proveedor' : 'Marcar como proveedor'}\n                                </MenuItem>\n                                <MenuDivider />\n                                <MenuItem\n                                  icon={<FaTrash />}\n                                  color=\"red.500\"\n                                  onClick={() => handleDelete(group.id)}\n                                >\n                                  Eliminar\n                                </MenuItem>\n                              </MenuList>\n                            </Menu>\n                          </HStack>\n                        </Td>\n                      </Tr>\n                    ))}\n                  </Tbody>\n                </Table>\n              </Box>\n            )}\n\n            {/* Paginación */}\n            {gruposData?.pagination && (\n              <Flex justify=\"center\" mt={6}>\n                <HStack spacing={2}>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    isDisabled={currentPage === 1}\n                  >\n                    Anterior\n                  </Button>\n                  <Text>\n                    Página {currentPage} de {gruposData.pagination.totalPages}\n                  </Text>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    isDisabled={currentPage === gruposData.pagination.totalPages}\n                  >\n                    Siguiente\n                  </Button>\n                </HStack>\n              </Flex>\n            )}\n          </CardBody>\n        </Card>\n      </VStack>\n\n      {/* Modal de Crear/Editar Grupo */}\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent>\n          <form onSubmit={handleSubmit}>\n            <ModalHeader>\n              {editingGroup ? 'Editar Grupo' : 'Crear Nuevo Grupo'}\n            </ModalHeader>\n            <ModalBody>\n              <VStack spacing={4}>\n                <FormControl isRequired>\n                  <FormLabel>Nombre del Grupo</FormLabel>\n                  <Input\n                    value={formData.nombre}\n                    onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}\n                    placeholder=\"Ingresa el nombre del grupo\"\n                  />\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel>Descripción</FormLabel>\n                  <Textarea\n                    value={formData.descripcion}\n                    onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })}\n                    placeholder=\"Descripción opcional del grupo\"\n                    rows={3}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel>WhatsApp JID</FormLabel>\n                  <Input\n                    value={formData.wa_jid}\n                    onChange={(e) => setFormData({ ...formData, wa_jid: e.target.value })}\n                    placeholder=\"1234567890-1234567890@g.us\"\n                  />\n                </FormControl>\n\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    <HStack>\n                      <FaCheck />\n                      <Text>Autorizado</Text>\n                    </HStack>\n                  </FormLabel>\n                  <Switch\n                    isChecked={formData.autorizado}\n                    onChange={(e) => setFormData({ ...formData, autorizado: e.target.checked })}\n                    colorScheme=\"green\"\n                  />\n                </FormControl>\n\n                <FormControl display=\"flex\" alignItems=\"center\">\n                  <FormLabel mb=\"0\">\n                    <HStack>\n                      <FaStore />\n                      <Text>Es Proveedor</Text>\n                    </HStack>\n                  </FormLabel>\n                  <Switch\n                    isChecked={formData.es_proveedor}\n                    onChange={(e) => setFormData({ ...formData, es_proveedor: e.target.checked })}\n                    colorScheme=\"blue\"\n                  />\n                </FormControl>\n              </VStack>\n            </ModalBody>\n            <ModalFooter>\n              <Button variant=\"ghost\" mr={3} onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button\n                colorScheme=\"blue\"\n                type=\"submit\"\n                isLoading={createGroupMutation.isLoading || updateGroupMutation.isLoading}\n              >\n                {editingGroup ? 'Actualizar' : 'Crear'}\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default Grupos;\n\n\n\n"],"names":["Grupos","searchTerm","setSearchTerm","useState","autorizadoFilter","setAutorizadoFilter","proveedorFilter","setProveedorFilter","currentPage","setCurrentPage","editingGroup","setEditingGroup","formData","setFormData","isOpen","onOpen","onClose","useDisclosure","toast","useToast","queryClient","useQueryClient","cardBg","useColorModeValue","borderColor","gruposData","isLoading","error","useQuery","apiService","stats","createGroupMutation","useMutation","resetForm","updateGroupMutation","data","deleteGroupMutation","authorizeGroupMutation","toggleProviderMutation","handleOpenCreate","handleOpenEdit","group","handleSubmit","e","handleDelete","groupId","handleAutorizar","autorizado","handleToggleProvider","es_proveedor","jsxs","Alert","jsx","AlertIcon","Box","VStack","Flex","Heading","Button","FaPlus","Card","CardBody","HStack","Stat","StatLabel","StatNumber","StatHelpText","InputGroup","InputLeftElement","FaSearch","Input","Select","Spinner","Text","Table","Thead","Tr","Th","Tbody","_a","Td","Badge","Tooltip","IconButton","FaEye","FaEdit","Menu","MenuButton","FaEllipsisV","MenuList","MenuItem","FaTimes","FaCheck","FaStore","MenuDivider","FaTrash","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","FormControl","FormLabel","Textarea","Switch","ModalFooter"],"mappings":"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"}