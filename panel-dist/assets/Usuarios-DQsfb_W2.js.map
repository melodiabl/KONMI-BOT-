{"version":3,"file":"Usuarios-DQsfb_W2.js","sources":["../../src/pages/Usuarios.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  VStack,\n  HStack,\n  Heading,\n  Text,\n  Button,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Badge,\n  IconButton,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormControl,\n  FormLabel,\n  Select,\n  useToast,\n  Spinner,\n  Alert,\n  AlertIcon,\n  Flex,\n  Spacer,\n  Card,\n  CardBody,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  useColorModeValue,\n  Tooltip,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  MenuDivider,\n} from '@chakra-ui/react';\nimport {\n  FaSearch,\n  FaPlus,\n  FaEdit,\n  FaTrash,\n  FaEye,\n  FaEllipsisV,\n  FaUser,\n  FaUserCheck,\n  FaUserTimes,\n  FaShieldAlt,\n  FaUsers,\n  FaCog,\n} from 'react-icons/fa';\nimport { useQuery, useMutation, useQueryClient } from 'react-query';\nimport { apiService } from '../services/api';\n\ninterface User {\n  id: number;\n  username: string;\n  roles: string[];\n  estado: string;\n  wa_jid?: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface UserFormData {\n  username: string;\n  password: string;\n  roles: string[];\n  estado: string;\n  wa_jid?: string;\n}\n\nconst roleColors = {\n  owner: 'purple',\n  admin: 'red',\n  moderador: 'green',\n  usuario: 'gray',\n};\n\nconst estadoColors = {\n  activo: 'green',\n  inactivo: 'red',\n  suspendido: 'orange',\n};\n\nexport const Usuarios: React.FC = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [estadoFilter, setEstadoFilter] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [formData, setFormData] = useState<UserFormData>({\n    username: '',\n    password: '',\n    roles: ['usuario'],\n    estado: 'activo',\n    wa_jid: '',\n  });\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const toast = useToast();\n  const queryClient = useQueryClient();\n\n  const cardBg = useColorModeValue('white', 'gray.700');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n\n  // Queries\n  const { data: usuariosData, isLoading, error } = useQuery(\n    ['usuarios', currentPage, searchTerm, estadoFilter],\n    () => apiService.getUsuarios(currentPage, 20, searchTerm, estadoFilter)\n  );\n\n  const { data: stats } = useQuery('usuarioStats', apiService.getUsuarioStats);\n\n  // Mutations\n  const createUserMutation = useMutation(apiService.createUsuario, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('usuarios');\n      toast({\n        title: 'Usuario creado',\n        description: 'El usuario ha sido creado exitosamente',\n        status: 'success',\n      });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al crear usuario',\n        status: 'error',\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation(\n    (data: { id: number; user: Partial<User> & { password?: string } }) =>\n      apiService.updateUsuario(data.id, data.user),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('usuarios');\n        toast({\n          title: 'Usuario actualizado',\n          description: 'El usuario ha sido actualizado exitosamente',\n          status: 'success',\n        });\n        onClose();\n        resetForm();\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al actualizar usuario',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const deleteUserMutation = useMutation(apiService.deleteUsuario, {\n    onSuccess: () => {\n      queryClient.invalidateQueries('usuarios');\n      toast({\n        title: 'Usuario eliminado',\n        description: 'El usuario ha sido eliminado exitosamente',\n        status: 'success',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.response?.data?.message || 'Error al eliminar usuario',\n        status: 'error',\n      });\n    },\n  });\n\n  const updateEstadoMutation = useMutation(\n    (data: { id: number; estado: string }) =>\n      apiService.updateUsuarioEstado(data.id, data.estado),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('usuarios');\n        toast({\n          title: 'Estado actualizado',\n          description: 'El estado del usuario ha sido actualizado',\n          status: 'success',\n        });\n      },\n      onError: (error: any) => {\n        toast({\n          title: 'Error',\n          description: error.response?.data?.message || 'Error al actualizar estado',\n          status: 'error',\n        });\n      },\n    }\n  );\n\n  const resetForm = () => {\n    setFormData({\n      username: '',\n      password: '',\n      roles: ['usuario'],\n      estado: 'activo',\n      wa_jid: '',\n    });\n    setEditingUser(null);\n  };\n\n  const handleOpenCreate = () => {\n    resetForm();\n    onOpen();\n  };\n\n  const handleOpenEdit = (user: User) => {\n    setEditingUser(user);\n    setFormData({\n      username: user.username,\n      password: '',\n      roles: user.roles,\n      estado: user.estado,\n      wa_jid: user.wa_jid || '',\n    });\n    onOpen();\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingUser) {\n      updateUserMutation.mutate({\n        id: editingUser.id,\n        user: formData,\n      });\n    } else {\n      createUserMutation.mutate(formData);\n    }\n  };\n\n  const handleDelete = (userId: number) => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar este usuario?')) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const handleEstadoChange = (userId: number, newEstado: string) => {\n    updateEstadoMutation.mutate({ id: userId, estado: newEstado });\n  };\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        Error al cargar usuarios: {(error as any).message}\n      </Alert>\n    );\n  }\n\n  return (\n    <Box>\n      <VStack spacing={6} align=\"stretch\">\n        {/* Header */}\n        <Flex align=\"center\" justify=\"space-between\">\n          <Heading size=\"lg\">Gestión de Usuarios</Heading>\n          <Button\n            leftIcon={<FaPlus />}\n            colorScheme=\"green\"\n            onClick={handleOpenCreate}\n          >\n            Nuevo Usuario\n          </Button>\n        </Flex>\n\n        {/* Estadísticas */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={8} justify=\"center\">\n              <Stat textAlign=\"center\">\n                <StatLabel>Total Usuarios</StatLabel>\n                <StatNumber>{stats?.totalUsuarios || 0}</StatNumber>\n                <StatHelpText>Registrados en el sistema</StatHelpText>\n              </Stat>\n              <Stat textAlign=\"center\">\n                <StatLabel>Activos</StatLabel>\n                <StatNumber color=\"green.500\">{stats?.usuariosActivos || 0}</StatNumber>\n                <StatHelpText>Usuarios activos</StatHelpText>\n              </Stat>\n              <Stat textAlign=\"center\">\n                <StatLabel>Administradores</StatLabel>\n                <StatNumber color=\"red.500\">{stats?.totalAdmins || 0}</StatNumber>\n                <StatHelpText>Con rol admin</StatHelpText>\n              </Stat>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Filtros */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            <HStack spacing={4}>\n              <InputGroup maxW=\"300px\">\n                <InputLeftElement pointerEvents=\"none\">\n                  <FaSearch color=\"gray.300\" />\n                </InputLeftElement>\n                <Input\n                  placeholder=\"Buscar usuarios...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </InputGroup>\n              <Select\n                placeholder=\"Filtrar por estado\"\n                value={estadoFilter}\n                onChange={(e) => setEstadoFilter(e.target.value)}\n                maxW=\"200px\"\n              >\n                <option value=\"activo\">Activo</option>\n                <option value=\"inactivo\">Inactivo</option>\n                <option value=\"suspendido\">Suspendido</option>\n              </Select>\n            </HStack>\n          </CardBody>\n        </Card>\n\n        {/* Tabla */}\n        <Card bg={cardBg} border=\"1px\" borderColor={borderColor}>\n          <CardBody>\n            {isLoading ? (\n              <Box textAlign=\"center\" py={8}>\n                <Spinner size=\"xl\" />\n                <Text mt={4}>Cargando usuarios...</Text>\n              </Box>\n            ) : (\n              <Box overflowX=\"auto\">\n                <Table variant=\"simple\">\n                  <Thead>\n                    <Tr>\n                      <Th>Usuario</Th>\n                      <Th>Roles</Th>\n                      <Th>Estado</Th>\n                      <Th>WhatsApp</Th>\n                      <Th>Fecha Creación</Th>\n                      <Th>Acciones</Th>\n                    </Tr>\n                  </Thead>\n                  <Tbody>\n                    {usuariosData?.usuarios?.map((user: User) => (\n                      <Tr key={user.id}>\n                        <Td>\n                          <VStack align=\"start\" spacing={1}>\n                            <Text fontWeight=\"semibold\">{user.username}</Text>\n                            <Text fontSize=\"sm\" color=\"gray.500\">\n                              ID: {user.id}\n                            </Text>\n                          </VStack>\n                        </Td>\n                        <Td>\n                          <HStack spacing={1}>\n                            {user.roles.map((role) => (\n                              <Badge\n                                key={role}\n                                colorScheme={roleColors[role as keyof typeof roleColors] || 'gray'}\n                                variant=\"subtle\"\n                              >\n                                {role}\n                              </Badge>\n                            ))}\n                          </HStack>\n                        </Td>\n                        <Td>\n                          <Badge\n                            colorScheme={estadoColors[user.estado as keyof typeof estadoColors] || 'gray'}\n                            variant=\"subtle\"\n                          >\n                            {user.estado}\n                          </Badge>\n                        </Td>\n                        <Td>\n                          {user.wa_jid ? (\n                            <Text fontSize=\"sm\" color=\"green.500\">\n                              {user.wa_jid}\n                            </Text>\n                          ) : (\n                            <Text fontSize=\"sm\" color=\"gray.500\">\n                              No configurado\n                            </Text>\n                          )}\n                        </Td>\n                        <Td>\n                          <Text fontSize=\"sm\">\n                            {new Date(user.created_at).toLocaleDateString()}\n                          </Text>\n                        </Td>\n                        <Td>\n                          <HStack spacing={2}>\n                            <Tooltip label=\"Ver detalles\">\n                              <IconButton\n                                aria-label=\"Ver detalles\"\n                                icon={<FaEye />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                colorScheme=\"blue\"\n                              />\n                            </Tooltip>\n                            <Tooltip label=\"Editar usuario\">\n                              <IconButton\n                                aria-label=\"Editar usuario\"\n                                icon={<FaEdit />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                colorScheme=\"orange\"\n                                onClick={() => handleOpenEdit(user)}\n                              />\n                            </Tooltip>\n                            <Menu>\n                              <MenuButton\n                                as={IconButton}\n                                aria-label=\"Más opciones\"\n                                icon={<FaEllipsisV />}\n                                size=\"sm\"\n                                variant=\"ghost\"\n                              />\n                              <MenuList>\n                                <MenuItem\n                                  icon={<FaUserCheck />}\n                                  onClick={() => handleEstadoChange(user.id, 'activo')}\n                                  isDisabled={user.estado === 'activo'}\n                                >\n                                  Activar\n                                </MenuItem>\n                                <MenuItem\n                                  icon={<FaUserTimes />}\n                                  onClick={() => handleEstadoChange(user.id, 'inactivo')}\n                                  isDisabled={user.estado === 'inactivo'}\n                                >\n                                  Desactivar\n                                </MenuItem>\n                                <MenuDivider />\n                                <MenuItem\n                                  icon={<FaTrash />}\n                                  color=\"red.500\"\n                                  onClick={() => handleDelete(user.id)}\n                                >\n                                  Eliminar\n                                </MenuItem>\n                              </MenuList>\n                            </Menu>\n                          </HStack>\n                        </Td>\n                      </Tr>\n                    ))}\n                  </Tbody>\n                </Table>\n              </Box>\n            )}\n\n            {/* Paginación */}\n            {usuariosData?.pagination && (\n              <Flex justify=\"center\" mt={6}>\n                <HStack spacing={2}>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage - 1)}\n                    isDisabled={currentPage === 1}\n                  >\n                    Anterior\n                  </Button>\n                  <Text>\n                    Página {currentPage} de {usuariosData.pagination.totalPages}\n                  </Text>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setCurrentPage(currentPage + 1)}\n                    isDisabled={currentPage === usuariosData.pagination.totalPages}\n                  >\n                    Siguiente\n                  </Button>\n                </HStack>\n              </Flex>\n            )}\n          </CardBody>\n        </Card>\n      </VStack>\n\n      {/* Modal de Crear/Editar Usuario */}\n      <Modal isOpen={isOpen} onClose={onClose} size=\"lg\">\n        <ModalOverlay />\n        <ModalContent>\n          <form onSubmit={handleSubmit}>\n            <ModalHeader>\n              {editingUser ? 'Editar Usuario' : 'Crear Nuevo Usuario'}\n            </ModalHeader>\n            <ModalBody>\n              <VStack spacing={4}>\n                <FormControl isRequired>\n                  <FormLabel>Nombre de Usuario</FormLabel>\n                  <Input\n                    value={formData.username}\n                    onChange={(e) => setFormData({ ...formData, username: e.target.value })}\n                    placeholder=\"Ingresa el nombre de usuario\"\n                  />\n                </FormControl>\n\n                <FormControl isRequired={!editingUser}>\n                  <FormLabel>\n                    {editingUser ? 'Nueva Contraseña (opcional)' : 'Contraseña'}\n                  </FormLabel>\n                  <Input\n                    type=\"password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    placeholder={editingUser ? 'Dejar vacío para mantener' : 'Ingresa la contraseña'}\n                  />\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel>Roles</FormLabel>\n                  <Select\n                    value={formData.roles[0] || 'usuario'}\n                    onChange={(e) => setFormData({ ...formData, roles: [e.target.value] })}\n                  >\n                    <option value=\"usuario\">Usuario</option>\n                    <option value=\"moderador\">Moderador</option>\n                    <option value=\"admin\">Administrador</option>\n                    <option value=\"owner\">Propietario</option>\n                  </Select>\n                </FormControl>\n\n                <FormControl isRequired>\n                  <FormLabel>Estado</FormLabel>\n                  <Select\n                    value={formData.estado}\n                    onChange={(e) => setFormData({ ...formData, estado: e.target.value })}\n                  >\n                    <option value=\"activo\">Activo</option>\n                    <option value=\"inactivo\">Inactivo</option>\n                    <option value=\"suspendido\">Suspendido</option>\n                  </Select>\n                </FormControl>\n\n                <FormControl>\n                  <FormLabel>WhatsApp JID (opcional)</FormLabel>\n                  <Input\n                    value={formData.wa_jid || ''}\n                    onChange={(e) => setFormData({ ...formData, wa_jid: e.target.value })}\n                    placeholder=\"1234567890@s.whatsapp.net\"\n                  />\n                </FormControl>\n              </VStack>\n            </ModalBody>\n            <ModalFooter>\n              <Button variant=\"ghost\" mr={3} onClick={onClose}>\n                Cancelar\n              </Button>\n              <Button\n                colorScheme=\"blue\"\n                type=\"submit\"\n                isLoading={createUserMutation.isLoading || updateUserMutation.isLoading}\n              >\n                {editingUser ? 'Actualizar' : 'Crear'}\n              </Button>\n            </ModalFooter>\n          </form>\n        </ModalContent>\n      </Modal>\n    </Box>\n  );\n};\n\nexport default Usuarios;\n\n\n\n"],"names":["roleColors","estadoColors","Usuarios","searchTerm","setSearchTerm","useState","estadoFilter","setEstadoFilter","currentPage","setCurrentPage","editingUser","setEditingUser","formData","setFormData","isOpen","onOpen","onClose","useDisclosure","toast","useToast","queryClient","useQueryClient","cardBg","useColorModeValue","borderColor","usuariosData","isLoading","error","useQuery","apiService","stats","createUserMutation","useMutation","resetForm","updateUserMutation","data","deleteUserMutation","updateEstadoMutation","handleOpenCreate","handleOpenEdit","user","handleSubmit","e","handleDelete","userId","handleEstadoChange","newEstado","jsxs","Alert","jsx","AlertIcon","Box","VStack","Flex","Heading","Button","FaPlus","Card","CardBody","HStack","Stat","StatLabel","StatNumber","StatHelpText","InputGroup","InputLeftElement","FaSearch","Input","Select","Spinner","Text","Table","Thead","Tr","Th","Tbody","_a","Td","role","Badge","Tooltip","IconButton","FaEye","FaEdit","Menu","MenuButton","FaEllipsisV","MenuList","MenuItem","FaUserCheck","FaUserTimes","MenuDivider","FaTrash","Modal","ModalOverlay","ModalContent","ModalHeader","ModalBody","FormControl","FormLabel","ModalFooter"],"mappings":"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"}