import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import readline from 'readline';
import { connectToWhatsApp, getAvailableGroups, getQRCode, getQRCodeImage, getConnectionStatus, getSocket, setAuthMethod } from './whatsapp.js';
import apiRouter from './api.js';
import { router as authRouter, authenticateToken, authorizeRoles } from './auth.js';
import subbotRouter from './subbot-api.js';
import { getAuthDefaults } from './global-config.js';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import db from './db.js';
import config from './config.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const port = config.server.port;

// Función interactiva para seleccionar método de autenticación
async function selectAuthMethod() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    console.log('\n=== MÉTODO DE AUTENTICACIÓN DEL BOT ===');
    console.log('1. QR Code (escanear código QR en terminal)');
    console.log('2. Pairing Code (código de 8 dígitos)');
    console.log('=======================================\n');

    rl.question('Seleccione método (1 o 2): ', (answer) => {
      const choice = answer.trim();
      
      if (choice === '1') {
        try {
          setAuthMethod('qr');
          console.log('\n✅ QR Code seleccionado');
          console.log('🔍 Escanee el código QR que aparecerá en la terminal');
        } catch (error) {
          console.error(`\n❌ Error: ${error.message}`);
        }
        rl.close();
        resolve('qr');
      } else if (choice === '2') {
        rl.question('Ingrese número de teléfono con código de país: ', (phoneNumber) => {
          const cleanedNumber = phoneNumber.replace(/[^0-9]/g, '');
          
          if (cleanedNumber.length >= 7 && cleanedNumber.length <= 15) {
            try {
              setAuthMethod('pairing', { phoneNumber: cleanedNumber });
              console.log(`\n✅ Pairing Code seleccionado`);
              console.log(`📱 Número: +${cleanedNumber}`);
              console.log('🔢 El código de 8 dígitos aparecerá en la terminal');
            } catch (error) {
              console.error(`\n❌ Error: ${error.message}`);
            }
          } else {
            console.log('\n❌ Número inválido, usando QR por defecto');
            try {
              setAuthMethod('qr');
            } catch (error) {
              console.error(`\n❌ Error: ${error.message}`);
            }
          }
          rl.close();
          resolve('pairing');
        });
      } else {
        console.log('\n❌ Opción inválida, usando QR por defecto');
        try {
          setAuthMethod('qr');
        } catch (error) {
          console.error(`\n❌ Error: ${error.message}`);
        }
        rl.close();
        resolve('qr');
      }
    });
  });
}

const app = express();
const port = config.server.port;

app.use(cors(config.cors));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Serve storage media statically (uploads, media, downloads)
app.use('/media', express.static(join(__dirname, 'storage')));

// Comentado: El frontend se sirve con Caddy
// if (process.env.NODE_ENV === 'production') {
//   const frontendDistPath = join(__dirname, '../../frontend-panel/dist');
async function promptAuthMethodIfNeeded() {
  // Forzar QR para el bot principal. Pairing deshabilitado por solicitud.
  try {
    setAuthMethod('qr');
    console.log('🔧 Autenticación del bot principal: QR (pairing también disponible)');
  } catch (error) {
    console.warn(`⚠️ No se pudo fijar modo QR: ${error.message}`);
  }
}

// Rutas de autenticaciónpales de la API
{{ ... }}


// Endpoints de WhatsApp bajo /api
app.get('/api/whatsapp/qr', authenticateToken, authorizeRoles('owner'), (_req, res) => {
  const status = getConnectionStatus();

  if (qrImage) {
    const base64Data = qrImage.replace(/^data:image\/png;base64,/, '');
    return res.json({
      qr: base64Data,
      qrImage,
      status: 'waiting_for_scan'
    });
  }

  res.json({ qr: null, qrImage: null, status });
});

app.get('/api/bot/qr', authenticateToken, authorizeRoles('owner'), (_req, res) => {
  const qrImage = getQRCodeImage();
  const qrCode = getQRCode();
  const status = getConnectionStatus();

  if (qrImage) {
    const base64Data = qrImage.replace(/^data:image\/png;base64,/, '');
    return res.json({
      available: true,
      qr: base64Data,
      qrCode,
      qrCodeImage: qrImage,
      status: 'waiting_for_scan'
    });
  }

  if (qrCode) {
    return res.json({
      available: true,
      qr: qrCode,
      qrCode,
      qrCodeImage: null,
      status: 'waiting_for_scan'
    });
  }

  res.json({
    available: false,
    qr: null,
    qrCode: null,
    qrCodeImage: null,
    status: status.status,
    message: 'No hay código QR disponible'
  });
});

app.get('/api/whatsapp/status', authenticateToken, authorizeRoles('admin', 'owner'), (_req, res) => {
  const status = getConnectionStatus();
  res.json({ status });
});

app.post('/api/whatsapp/logout', authenticateToken, authorizeRoles('owner'), async (_req, res) => {
  try {
    const sock = getSocket();
    if (sock) {
      await sock.logout();
      return res.json({ success: true, message: 'Desconectado exitosamente' });
    }
    return res.json({ success: false, message: 'No hay conexión activa' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Compatibilidad con versiones anteriores del panel
app.post('/api/bot/disconnect', authenticateToken, authorizeRoles('owner'), async (_req, res) => {
  try {
    const sock = getSocket();
    if (sock) {
      await sock.logout();
      return res.json({ success: true });
    }
    return res.json({ success: false, message: 'No hay conexión activa' });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
});

app.post('/api/bot/restart', authenticateToken, authorizeRoles('owner'), async (_req, res) => {
  try {
    const sock = getSocket();
    if (sock) {
      try { await sock.logout(); } catch (_) {}
    }
    await connectToWhatsApp(join(__dirname, 'storage', 'baileys_full'));
    return res.json({ success: true });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
});

// Endpoint para obtener grupos disponibles del bot
app.get('/api/whatsapp/groups', authenticateToken, authorizeRoles('admin', 'owner'), async (req, res) => {
  try {
    const groups = await getAvailableGroups();
    res.json(groups);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Health check endpoint for Railway
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Catch-all handler: send back React's index.html file in production
// Comentado: El frontend se sirve con Caddy
// if (process.env.NODE_ENV === 'production') {
//   app.get('*', (req, res) => {
//     const frontendDistPath = join(__dirname, '../../frontend-panel/dist');
//     res.sendFile(join(frontendDistPath, 'index.html'));
//   });
// }

// Start the bot connection and server
async function start() {
  await promptAuthMethodIfNeeded();
  await connectToWhatsApp(join(__dirname, 'storage', 'baileys_full'));
  app.listen(port, config.server.host, () => {
    console.log(`🚀 Backend server listening on port ${port}`);
    console.log(`🌍 Environment: ${config.server.environment}`);
    console.log(`🔗 Frontend URL: ${config.frontend.url}`);
    console.log(`🤖 Bot: ${config.bot.name} v${config.bot.version}`);
  });
}

start();

export { db, app };
