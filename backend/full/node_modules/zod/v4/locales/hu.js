import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: "karakter", verb: "legyen" },
        file: { unit: "byte", verb: "legyen" },
        array: { unit: "elem", verb: "legyen" },
        set: { unit: "elem", verb: "legyen" },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case "number": {
                return Number.isNaN(data) ? "NaN" : "szm";
            }
            case "object": {
                if (Array.isArray(data)) {
                    return "tmb";
                }
                if (data === null) {
                    return "null";
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: "bemenet",
        email: "email cm",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO idblyeg",
        date: "ISO dtum",
        time: "ISO id",
        duration: "ISO idintervallum",
        ipv4: "IPv4 cm",
        ipv6: "IPv6 cm",
        cidrv4: "IPv4 tartomny",
        cidrv6: "IPv6 tartomny",
        base64: "base64-kdolt string",
        base64url: "base64url-kdolt string",
        json_string: "JSON string",
        e164: "E.164 szm",
        jwt: "JWT",
        template_literal: "bemenet",
    };
    return (issue) => {
        switch (issue.code) {
            case "invalid_type":
                return `rvnytelen bemenet: a vrt rtk ${issue.expected}, a kapott rtk ${parsedType(issue.input)}`;
            // return `Invalid input: expected ${issue.expected}, received ${util.getParsedType(issue.input)}`;
            case "invalid_value":
                if (issue.values.length === 1)
                    return `rvnytelen bemenet: a vrt rtk ${util.stringifyPrimitive(issue.values[0])}`;
                return `rvnytelen opci: valamelyik rtk vrt ${util.joinValues(issue.values, "|")}`;
            case "too_big": {
                const adj = issue.inclusive ? "<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `Tl nagy: ${issue.origin ?? "rtk"} mrete tl nagy ${adj}${issue.maximum.toString()} ${sizing.unit ?? "elem"}`;
                return `Tl nagy: a bemeneti rtk ${issue.origin ?? "rtk"} tl nagy: ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `Tl kicsi: a bemeneti rtk ${issue.origin} mrete tl kicsi ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                }
                return `Tl kicsi: a bemeneti rtk ${issue.origin} tl kicsi ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with")
                    return `rvnytelen string: "${_issue.prefix}" rtkkel kell kezddnie`;
                if (_issue.format === "ends_with")
                    return `rvnytelen string: "${_issue.suffix}" rtkkel kell vgzdnie`;
                if (_issue.format === "includes")
                    return `rvnytelen string: "${_issue.includes}" rtket kell tartalmaznia`;
                if (_issue.format === "regex")
                    return `rvnytelen string: ${_issue.pattern} mintnak kell megfelelnie`;
                return `rvnytelen ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `rvnytelen szm: ${issue.divisor} tbbszrsnek kell lennie`;
            case "unrecognized_keys":
                return `Ismeretlen kulcs${issue.keys.length > 1 ? "s" : ""}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `rvnytelen kulcs ${issue.origin}`;
            case "invalid_union":
                return "rvnytelen bemenet";
            case "invalid_element":
                return `rvnytelen rtk: ${issue.origin}`;
            default:
                return `rvnytelen bemenet`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}
