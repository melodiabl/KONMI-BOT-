import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: "", verb: "" },
        file: { unit: "", verb: "" },
        array: { unit: "", verb: "" },
        set: { unit: "", verb: "" },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case "number": {
                return Number.isNaN(data) ? "(NaN)" : "";
            }
            case "object": {
                if (Array.isArray(data)) {
                    return "";
                }
                if (data === null) {
                    return "(null)";
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: "",
        email: "",
        url: "URL",
        emoji: "",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO",
        date: "ISO",
        time: "ISO",
        duration: "ISO",
        ipv4: "IPv4",
        ipv6: "IPv6",
        cidrv4: "IPv4",
        cidrv6: "IPv6",
        base64: "base64",
        base64url: "base64url",
        json_string: "JSON",
        e164: "E.164",
        jwt: "JWT",
        template_literal: "",
    };
    return (issue) => {
        switch (issue.code) {
            case "invalid_type":
                return ` ${issue.expected} ${parsedType(issue.input)}`;
            case "invalid_value":
                if (issue.values.length === 1)
                    return ` ${util.stringifyPrimitive(issue.values[0])}`;
                return ` ${util.joinValues(issue.values, "|")}`;
            case "too_big": {
                const adj = issue.inclusive ? "<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return ` ${issue.origin ?? ""} ${adj}${issue.maximum.toString()} ${sizing.unit ?? ""}`;
                return ` ${issue.origin ?? ""} ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return ` ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                }
                return ` ${issue.origin} ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with")
                    return ` "${_issue.prefix}" `;
                if (_issue.format === "ends_with")
                    return ` "${_issue.suffix}" `;
                if (_issue.format === "includes")
                    return ` "${_issue.includes}"`;
                if (_issue.format === "regex")
                    return ` ${_issue.pattern}`;
                return `${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return ` ${issue.divisor} `;
            case "unrecognized_keys":
                return `(key): ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `${issue.origin} (key)`;
            case "invalid_union":
                return "";
            case "invalid_element":
                return `${issue.origin} (value)`;
            default:
                return ``;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}
