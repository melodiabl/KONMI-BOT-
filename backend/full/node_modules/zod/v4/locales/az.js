import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: "simvol", verb: "olmaldr" },
        file: { unit: "bayt", verb: "olmaldr" },
        array: { unit: "element", verb: "olmaldr" },
        set: { unit: "element", verb: "olmaldr" },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case "number": {
                return Number.isNaN(data) ? "NaN" : "number";
            }
            case "object": {
                if (Array.isArray(data)) {
                    return "array";
                }
                if (data === null) {
                    return "null";
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: "input",
        email: "email address",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "ISO datetime",
        date: "ISO date",
        time: "ISO time",
        duration: "ISO duration",
        ipv4: "IPv4 address",
        ipv6: "IPv6 address",
        cidrv4: "IPv4 range",
        cidrv6: "IPv6 range",
        base64: "base64-encoded string",
        base64url: "base64url-encoded string",
        json_string: "JSON string",
        e164: "E.164 number",
        jwt: "JWT",
        template_literal: "input",
    };
    return (issue) => {
        switch (issue.code) {
            case "invalid_type":
                return `Yanl dyr: gzlniln ${issue.expected}, daxil olan ${parsedType(issue.input)}`;
            case "invalid_value":
                if (issue.values.length === 1)
                    return `Yanl dyr: gzlniln ${util.stringifyPrimitive(issue.values[0])}`;
                return `Yanl seim: aadaklardan biri olmaldr: ${util.joinValues(issue.values, "|")}`;
            case "too_big": {
                const adj = issue.inclusive ? "<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `ox byk: gzlniln ${issue.origin ?? "dyr"} ${adj}${issue.maximum.toString()} ${sizing.unit ?? "element"}`;
                return `ox byk: gzlniln ${issue.origin ?? "dyr"} ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing)
                    return `ox kiik: gzlniln ${issue.origin} ${adj}${issue.minimum.toString()} ${sizing.unit}`;
                return `ox kiik: gzlniln ${issue.origin} ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with")
                    return `Yanl mtn: "${_issue.prefix}" il balamaldr`;
                if (_issue.format === "ends_with")
                    return `Yanl mtn: "${_issue.suffix}" il bitmlidir`;
                if (_issue.format === "includes")
                    return `Yanl mtn: "${_issue.includes}" daxil olmaldr`;
                if (_issue.format === "regex")
                    return `Yanl mtn: ${_issue.pattern} ablonuna uyun olmaldr`;
                return `Yanl ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Yanl dd: ${issue.divisor} il bln biln olmaldr`;
            case "unrecognized_keys":
                return `Tannmayan aar${issue.keys.length > 1 ? "lar" : ""}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `${issue.origin} daxilind yanl aar`;
            case "invalid_union":
                return "Yanl dyr";
            case "invalid_element":
                return `${issue.origin} daxilind yanl dyr`;
            default:
                return `Yanl dyr`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}
