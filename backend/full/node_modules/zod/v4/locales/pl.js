import * as util from "../core/util.js";
const error = () => {
    const Sizable = {
        string: { unit: "znakw", verb: "mie" },
        file: { unit: "bajtw", verb: "mie" },
        array: { unit: "elementw", verb: "mie" },
        set: { unit: "elementw", verb: "mie" },
    };
    function getSizing(origin) {
        return Sizable[origin] ?? null;
    }
    const parsedType = (data) => {
        const t = typeof data;
        switch (t) {
            case "number": {
                return Number.isNaN(data) ? "NaN" : "liczba";
            }
            case "object": {
                if (Array.isArray(data)) {
                    return "tablica";
                }
                if (data === null) {
                    return "null";
                }
                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
                    return data.constructor.name;
                }
            }
        }
        return t;
    };
    const Nouns = {
        regex: "wyraenie",
        email: "adres email",
        url: "URL",
        emoji: "emoji",
        uuid: "UUID",
        uuidv4: "UUIDv4",
        uuidv6: "UUIDv6",
        nanoid: "nanoid",
        guid: "GUID",
        cuid: "cuid",
        cuid2: "cuid2",
        ulid: "ULID",
        xid: "XID",
        ksuid: "KSUID",
        datetime: "data i godzina w formacie ISO",
        date: "data w formacie ISO",
        time: "godzina w formacie ISO",
        duration: "czas trwania ISO",
        ipv4: "adres IPv4",
        ipv6: "adres IPv6",
        cidrv4: "zakres IPv4",
        cidrv6: "zakres IPv6",
        base64: "cig znakw zakodowany w formacie base64",
        base64url: "cig znakw zakodowany w formacie base64url",
        json_string: "cig znakw w formacie JSON",
        e164: "liczba E.164",
        jwt: "JWT",
        template_literal: "wejcie",
    };
    return (issue) => {
        switch (issue.code) {
            case "invalid_type":
                return `Nieprawidowe dane wejciowe: oczekiwano ${issue.expected}, otrzymano ${parsedType(issue.input)}`;
            case "invalid_value":
                if (issue.values.length === 1)
                    return `Nieprawidowe dane wejciowe: oczekiwano ${util.stringifyPrimitive(issue.values[0])}`;
                return `Nieprawidowa opcja: oczekiwano jednej z wartoci ${util.joinValues(issue.values, "|")}`;
            case "too_big": {
                const adj = issue.inclusive ? "<=" : "<";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `Za dua warto: oczekiwano, e ${issue.origin ?? "warto"} bdzie mie ${adj}${issue.maximum.toString()} ${sizing.unit ?? "elementw"}`;
                }
                return `Zbyt du(y/a/e): oczekiwano, e ${issue.origin ?? "warto"} bdzie wynosi ${adj}${issue.maximum.toString()}`;
            }
            case "too_small": {
                const adj = issue.inclusive ? ">=" : ">";
                const sizing = getSizing(issue.origin);
                if (sizing) {
                    return `Za maa warto: oczekiwano, e ${issue.origin ?? "warto"} bdzie mie ${adj}${issue.minimum.toString()} ${sizing.unit ?? "elementw"}`;
                }
                return `Zbyt ma(y/a/e): oczekiwano, e ${issue.origin ?? "warto"} bdzie wynosi ${adj}${issue.minimum.toString()}`;
            }
            case "invalid_format": {
                const _issue = issue;
                if (_issue.format === "starts_with")
                    return `Nieprawidowy cig znakw: musi zaczyna si od "${_issue.prefix}"`;
                if (_issue.format === "ends_with")
                    return `Nieprawidowy cig znakw: musi koczy si na "${_issue.suffix}"`;
                if (_issue.format === "includes")
                    return `Nieprawidowy cig znakw: musi zawiera "${_issue.includes}"`;
                if (_issue.format === "regex")
                    return `Nieprawidowy cig znakw: musi odpowiada wzorcowi ${_issue.pattern}`;
                return `Nieprawidow(y/a/e) ${Nouns[_issue.format] ?? issue.format}`;
            }
            case "not_multiple_of":
                return `Nieprawidowa liczba: musi by wielokrotnoci ${issue.divisor}`;
            case "unrecognized_keys":
                return `Nierozpoznane klucze${issue.keys.length > 1 ? "s" : ""}: ${util.joinValues(issue.keys, ", ")}`;
            case "invalid_key":
                return `Nieprawidowy klucz w ${issue.origin}`;
            case "invalid_union":
                return "Nieprawidowe dane wejciowe";
            case "invalid_element":
                return `Nieprawidowa warto w ${issue.origin}`;
            default:
                return `Nieprawidowe dane wejciowe`;
        }
    };
};
export default function () {
    return {
        localeError: error(),
    };
}
