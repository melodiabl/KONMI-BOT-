import type { $ZodStringFormats } from "../core/checks.js";
import type * as errors from "../core/errors.js";
import * as util from "../core/util.js";

const error: () => errors.$ZodErrorMap = () => {
  const Sizable: Record<string, { unit: string; verb: string }> = {
    string: { unit: "", verb: "" },
    file: { unit: "", verb: "" },
    array: { unit: "", verb: "" },
    set: { unit: "", verb: "" },
  };

  function getSizing(origin: string): { unit: string; verb: string } | null {
    return Sizable[origin] ?? null;
  }

  const parsedType = (data: any): string => {
    const t = typeof data;

    switch (t) {
      case "number": {
        return Number.isNaN(data) ? "NaN" : "";
      }
      case "object": {
        if (Array.isArray(data)) {
          return "";
        }
        if (data === null) {
          return "";
        }

        if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {
          return data.constructor.name;
        }
      }
    }
    return t;
  };

  const Nouns: {
    [k in $ZodStringFormats | (string & {})]?: string;
  } = {
    regex: " ",
    email: "  ",
    url: "  ",
    emoji: "",
    uuid: "   ",
    uuidv4: "     4",
    uuidv6: "     6",
    nanoid: "  ",
    guid: "   ",
    cuid: "   ",
    cuid2: "    2",
    ulid: "   ",
    xid: "  ",
    ksuid: "    ",
    datetime: "    ",
    date: "   ",
    time: "   ",
    duration: "   ",
    ipv4: "   4 ",
    ipv6: "   6 ",
    cidrv4: "   4 ",
    cidrv6: "   6 ",
    base64: " 64   ",
    base64url: " 64      ",
    json_string: "    ",
    e164: " 164 ",
    jwt: "  ",
    template_literal: " ",
  };

  return (issue) => {
    switch (issue.code) {
      case "invalid_type":
        return `  : ${issue.expected}   ${parsedType(issue.input)}  `;
      case "invalid_value":
        if (issue.values.length === 1) return `  : ${util.stringifyPrimitive(issue.values[0])}  `;
        return ` : ${util.joinValues(issue.values, "|")}     `;
      case "too_big": {
        const adj = issue.inclusive ? "<=" : "<";
        const sizing = getSizing(issue.origin);
        if (sizing)
          return ` : ${issue.origin ?? ""}  ${adj}${issue.maximum.toString()} ${sizing.unit ?? ""}   `;
        return ` : ${issue.origin ?? ""}  ${adj}${issue.maximum.toString()}   `;
      }
      case "too_small": {
        const adj = issue.inclusive ? ">=" : ">";
        const sizing = getSizing(issue.origin);
        if (sizing) {
          return ` : ${issue.origin}  ${adj}${issue.minimum.toString()} ${sizing.unit}   `;
        }

        return ` : ${issue.origin}  ${adj}${issue.minimum.toString()}   `;
      }
      case "invalid_format": {
        const _issue = issue as errors.$ZodStringFormatIssues;
        if (_issue.format === "starts_with") {
          return ` : "${_issue.prefix}"    `;
        }
        if (_issue.format === "ends_with") return ` : "${_issue.suffix}"    `;
        if (_issue.format === "includes") return ` : "${_issue.includes}"   `;
        if (_issue.format === "regex") return ` :  ${_issue.pattern}    `;
        return ` ${Nouns[_issue.format] ?? issue.format}`;
      }
      case "not_multiple_of":
        return ` : ${issue.divisor}    `;
      case "unrecognized_keys":
        return `   ${issue.keys.length > 1 ? "" : ""}: ${util.joinValues(issue.keys, " ")}`;
      case "invalid_key":
        return `${issue.origin}   `;
      case "invalid_union":
        return "  ";
      case "invalid_element":
        return `${issue.origin}   `;
      default:
        return `  `;
    }
  };
};

export default function (): { localeError: errors.$ZodErrorMap } {
  return {
    localeError: error(),
  };
}
